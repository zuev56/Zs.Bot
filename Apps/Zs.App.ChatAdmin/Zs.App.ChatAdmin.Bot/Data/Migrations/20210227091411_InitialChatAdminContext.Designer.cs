// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Zs.App.ChatAdmin.Data;

namespace Zs.App.ChatAdmin.Data.Migrations
{
    [DbContext(typeof(ChatAdminContext))]
    [Migration("20210227091411_InitialChatAdminContext")]
    partial class InitialChatAdminContext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseSerialColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Zs.App.ChatAdmin.Model.Accounting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("accounting_id")
                        .UseSerialColumn();

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("accounting_start_date")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("accountings", "zl");
                });

            modelBuilder.Entity("Zs.App.ChatAdmin.Model.AuxiliaryWord", b =>
                {
                    b.Property<string>("TheWord")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("the_word");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("now()");

                    b.HasKey("TheWord");

                    b.ToTable("auxiliary_words", "zl");
                });

            modelBuilder.Entity("Zs.App.ChatAdmin.Model.Ban", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ban_id")
                        .UseSerialColumn();

                    b.Property<int>("ChatId")
                        .HasColumnType("integer")
                        .HasColumnName("chat_id");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ban_finish_date");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int?>("WarningMessageId")
                        .HasColumnType("integer")
                        .HasColumnName("warning_message_id");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("bans", "zl");
                });

            modelBuilder.Entity("Zs.App.ChatAdmin.Model.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("notification_id")
                        .UseSerialColumn();

                    b.Property<int>("Day")
                        .HasColumnType("integer")
                        .HasColumnName("notification_day");

                    b.Property<DateTime?>("ExecDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("notification_exec_date");

                    b.Property<int>("Hour")
                        .HasColumnType("integer")
                        .HasColumnName("notification_hour");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("notification_is_active");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("notification_message");

                    b.Property<int>("Minute")
                        .HasColumnType("integer")
                        .HasColumnName("notification_minute");

                    b.Property<int?>("Month")
                        .HasColumnType("integer")
                        .HasColumnName("notification_month");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("notifications", "zl");
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("chat_id")
                        .UseSerialColumn();

                    b.Property<string>("ChatTypeId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("chat_type_code");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("chat_description");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("chat_name");

                    b.Property<string>("RawData")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("raw_data");

                    b.Property<string>("RawDataHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("raw_data_hash");

                    b.Property<string>("RawDataHistory")
                        .HasColumnType("json")
                        .HasColumnName("raw_data_history");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("ChatTypeId");

                    b.ToTable("chats", "bot");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            ChatTypeId = "PRIVATE",
                            Description = "UnitTestChat",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 704, DateTimeKind.Local).AddTicks(1662),
                            Name = "UnitTestChat",
                            RawData = "{ \"test\": \"test\" }",
                            RawDataHash = "-1063294487",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 1,
                            ChatTypeId = "PRIVATE",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 704, DateTimeKind.Local).AddTicks(2241),
                            Name = "zuev56",
                            RawData = "{ \"Id\": 210281448 }",
                            RawDataHash = "-1063294487",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.ChatType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("chat_type_code");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("chat_type_name");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("chat_types", "bot");

                    b.HasData(
                        new
                        {
                            Id = "CHANNEL",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 703, DateTimeKind.Local).AddTicks(6634),
                            Name = "Channel",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "GROUP",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 703, DateTimeKind.Local).AddTicks(7243),
                            Name = "Group",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "PRIVATE",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 703, DateTimeKind.Local).AddTicks(7253),
                            Name = "Private",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "UNDEFINED",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 703, DateTimeKind.Local).AddTicks(7254),
                            Name = "Undefined",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.Command", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("command_name");

                    b.Property<string>("DefaultArgs")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("command_default_args");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("command_desc");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("command_group");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Script")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("command_script");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("commands", "bot");

                    b.HasData(
                        new
                        {
                            Id = "/test",
                            Description = "Тестовый запрос к боту. Возвращает ''Test''",
                            Group = "moderatorCmdGroup",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 705, DateTimeKind.Local).AddTicks(6741),
                            Script = "SELECT 'Test'",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "/nulltest",
                            Description = "Тестовый запрос к боту. Возвращает NULL",
                            Group = "moderatorCmdGroup",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 705, DateTimeKind.Local).AddTicks(7625),
                            Script = "SELECT null",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "/help",
                            DefaultArgs = "<UserRoleId>",
                            Description = "Получение справки по доступным функциям",
                            Group = "userCmdGroup",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 705, DateTimeKind.Local).AddTicks(8247),
                            Script = "SELECT bot.sf_cmd_get_help({0})",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "/sqlquery",
                            DefaultArgs = "select 'Pass your query as parameter in double quotes'",
                            Description = "SQL-запрос",
                            Group = "adminCmdGroup",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 705, DateTimeKind.Local).AddTicks(8264),
                            Script = "select (with userQuery as ({0}) select json_agg(q) from userQuery q)",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "/getuserstatistics",
                            DefaultArgs = "15; now()::Date; now()",
                            Description = "Получение статистики по активности участников всех чатов за определённый период",
                            Group = "adminCmdGroup",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 707, DateTimeKind.Local).AddTicks(3267),
                            Script = "SELECT zl.sf_cmd_get_full_statistics({0}, {1}, {2})",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("log_id")
                        .UseSerialColumn();

                    b.Property<string>("Data")
                        .HasColumnType("json")
                        .HasColumnName("log_data");

                    b.Property<string>("Initiator")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("log_initiator");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("log_message");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("log_type");

                    b.HasKey("Id");

                    b.ToTable("logs", "bot");
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("message_id")
                        .UseSerialColumn();

                    b.Property<int>("ChatId")
                        .HasColumnType("integer")
                        .HasColumnName("chat_id");

                    b.Property<string>("FailDescription")
                        .HasColumnType("json")
                        .HasColumnName("fail_description");

                    b.Property<int>("FailsCount")
                        .HasColumnType("integer")
                        .HasColumnName("fails_count");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bool")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsSucceed")
                        .HasColumnType("bool")
                        .HasColumnName("is_succeed");

                    b.Property<string>("MessageTypeId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("message_type_code");

                    b.Property<string>("MessengerId")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("messenger_code");

                    b.Property<string>("RawData")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("raw_data");

                    b.Property<string>("RawDataHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("raw_data_hash");

                    b.Property<string>("RawDataHistory")
                        .HasColumnType("json")
                        .HasColumnName("raw_data_history");

                    b.Property<int?>("ReplyToMessageId")
                        .HasColumnType("integer")
                        .HasColumnName("reply_to_message_id");

                    b.Property<string>("Text")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("message_text");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("MessageTypeId");

                    b.HasIndex("MessengerId");

                    b.HasIndex("ReplyToMessageId");

                    b.HasIndex("UserId");

                    b.ToTable("messages", "bot");
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.MessageType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("message_type_code");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("message_type_name");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("message_types", "bot");

                    b.HasData(
                        new
                        {
                            Id = "UKN",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 705, DateTimeKind.Local).AddTicks(3201),
                            Name = "Unknown",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "TXT",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 705, DateTimeKind.Local).AddTicks(3778),
                            Name = "Text",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "PHT",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 705, DateTimeKind.Local).AddTicks(3787),
                            Name = "Photo",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "AUD",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 705, DateTimeKind.Local).AddTicks(3788),
                            Name = "Audio",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "VID",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 705, DateTimeKind.Local).AddTicks(3790),
                            Name = "Video",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "VOI",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 705, DateTimeKind.Local).AddTicks(3791),
                            Name = "Voice",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "DOC",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 705, DateTimeKind.Local).AddTicks(3792),
                            Name = "Document",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "STK",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 705, DateTimeKind.Local).AddTicks(3793),
                            Name = "Sticker",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "LOC",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 705, DateTimeKind.Local).AddTicks(3795),
                            Name = "Location",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "CNT",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 705, DateTimeKind.Local).AddTicks(3796),
                            Name = "Contact",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "SRV",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 705, DateTimeKind.Local).AddTicks(3797),
                            Name = "Service message",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "OTH",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 705, DateTimeKind.Local).AddTicks(3798),
                            Name = "Other",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.MessengerInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("messenger_code");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("messenger_name");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("messengers", "bot");

                    b.HasData(
                        new
                        {
                            Id = "TG",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 701, DateTimeKind.Local).AddTicks(1913),
                            Name = "Telegram",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "VK",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 702, DateTimeKind.Local).AddTicks(2980),
                            Name = "Вконтакте",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "SK",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 702, DateTimeKind.Local).AddTicks(3004),
                            Name = "Skype",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "FB",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 702, DateTimeKind.Local).AddTicks(3006),
                            Name = "Facebook",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "DC",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 702, DateTimeKind.Local).AddTicks(3007),
                            Name = "Discord",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id")
                        .UseSerialColumn();

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("user_full_name");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsBot")
                        .HasColumnType("bool")
                        .HasColumnName("user_is_bot");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("user_name");

                    b.Property<string>("RawData")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("raw_data");

                    b.Property<string>("RawDataHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("raw_data_hash");

                    b.Property<string>("RawDataHistory")
                        .HasColumnType("json")
                        .HasColumnName("raw_data_history");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("UserRoleId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_role_code");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("users", "bot");

                    b.HasData(
                        new
                        {
                            Id = -10,
                            FullName = "for exported message reading",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 705, DateTimeKind.Local).AddTicks(445),
                            IsBot = false,
                            Name = "Unknown",
                            RawData = "{ \"test\": \"test\" }",
                            RawDataHash = "-1063294487",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserRoleId = "USER"
                        },
                        new
                        {
                            Id = -1,
                            FullName = "UnitTest",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 705, DateTimeKind.Local).AddTicks(1037),
                            IsBot = false,
                            Name = "UnitTestUser",
                            RawData = "{ \"test\": \"test\" }",
                            RawDataHash = "-1063294487",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserRoleId = "USER"
                        },
                        new
                        {
                            Id = 1,
                            FullName = "Сергей Зуев",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 705, DateTimeKind.Local).AddTicks(1050),
                            IsBot = false,
                            Name = "zuev56",
                            RawData = "{ \"Id\": 210281448 }",
                            RawDataHash = "-1063294487",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserRoleId = "ADMIN"
                        });
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user_role_code");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("insert_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("user_role_name");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("user_role_permissions");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("user_roles", "bot");

                    b.HasData(
                        new
                        {
                            Id = "OWNER",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 704, DateTimeKind.Local).AddTicks(4639),
                            Name = "Owner",
                            Permissions = "[ \"All\" ]",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "ADMIN",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 704, DateTimeKind.Local).AddTicks(5217),
                            Name = "Administrator",
                            Permissions = "[ \"adminCmdGroup\", \"moderatorCmdGroup\", \"userCmdGroup\" ]",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "MODERATOR",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 704, DateTimeKind.Local).AddTicks(5226),
                            Name = "Moderator",
                            Permissions = "[ \"moderatorCmdGroup\", \"userCmdGroup\" ]",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "USER",
                            InsertDate = new DateTime(2021, 2, 27, 12, 14, 10, 704, DateTimeKind.Local).AddTicks(5228),
                            Name = "User",
                            Permissions = "[ \"userCmdGroup\" ]",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Zs.App.ChatAdmin.Model.Ban", b =>
                {
                    b.HasOne("Zs.Bot.Data.Models.Chat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zs.Bot.Data.Models.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId");

                    b.HasOne("Zs.Bot.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.Chat", b =>
                {
                    b.HasOne("Zs.Bot.Data.Models.ChatType", "ChatType")
                        .WithMany("Chats")
                        .HasForeignKey("ChatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatType");
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.Message", b =>
                {
                    b.HasOne("Zs.Bot.Data.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zs.Bot.Data.Models.MessageType", "MessageType")
                        .WithMany("Messages")
                        .HasForeignKey("MessageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zs.Bot.Data.Models.MessengerInfo", "Messenger")
                        .WithMany("Messages")
                        .HasForeignKey("MessengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zs.Bot.Data.Models.Message", "ReplyToMessage")
                        .WithMany()
                        .HasForeignKey("ReplyToMessageId");

                    b.HasOne("Zs.Bot.Data.Models.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("MessageType");

                    b.Navigation("Messenger");

                    b.Navigation("ReplyToMessage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.User", b =>
                {
                    b.HasOne("Zs.Bot.Data.Models.UserRole", "UserRoles")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.ChatType", b =>
                {
                    b.Navigation("Chats");
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.MessageType", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.MessengerInfo", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.User", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Zs.Bot.Data.Models.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
