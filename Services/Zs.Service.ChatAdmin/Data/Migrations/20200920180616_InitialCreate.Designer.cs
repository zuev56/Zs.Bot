// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Zs.Service.ChatAdmin.Data;

namespace Zs.Service.ChatAdmin.Data.Migrations
{
    [DbContext(typeof(ChatAdminContext))]
    [Migration("20200920180616_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Zs.Bot.Model.Bot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bot_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnName("bot_description")
                        .HasColumnType("character varying(300)")
                        .HasMaxLength(300);

                    b.Property<DateTime>("InsertDate")
                        .HasColumnName("insert_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MessengerCode")
                        .IsRequired()
                        .HasColumnName("messenger_code")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("bot_name")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnName("bot_token")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MessengerCode");

                    b.ToTable("bots","bot");
                });

            modelBuilder.Entity("Zs.Bot.Model.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("chat_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ChatTypeCode")
                        .IsRequired()
                        .HasColumnName("chat_type_code")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .HasColumnName("chat_description")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("InsertDate")
                        .HasColumnName("insert_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("chat_name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RawData")
                        .IsRequired()
                        .HasColumnName("raw_data")
                        .HasColumnType("json");

                    b.Property<string>("RawDataHash")
                        .IsRequired()
                        .HasColumnName("raw_data_hash")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RawDataHistory")
                        .HasColumnName("raw_data_history")
                        .HasColumnType("json");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ChatTypeCode");

                    b.ToTable("chats","bot");
                });

            modelBuilder.Entity("Zs.Bot.Model.ChatType", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnName("chat_type_code")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("InsertDate")
                        .HasColumnName("insert_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("chat_type_name")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Code");

                    b.ToTable("chat_types","bot");
                });

            modelBuilder.Entity("Zs.Bot.Model.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("message_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ChatId")
                        .HasColumnName("chat_id")
                        .HasColumnType("integer");

                    b.Property<string>("FailDescription")
                        .HasColumnName("fail_description")
                        .HasColumnType("json");

                    b.Property<int>("FailsCount")
                        .HasColumnName("fails_count")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnName("insert_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("is_deleted")
                        .HasColumnType("bool");

                    b.Property<bool>("IsSucceed")
                        .HasColumnName("is_succeed")
                        .HasColumnType("bool");

                    b.Property<string>("MessageTypeCode")
                        .IsRequired()
                        .HasColumnName("message_type_code")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("MessengerCode")
                        .IsRequired()
                        .HasColumnName("messenger_code")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("RawData")
                        .IsRequired()
                        .HasColumnName("raw_data")
                        .HasColumnType("json");

                    b.Property<string>("RawDataHash")
                        .IsRequired()
                        .HasColumnName("raw_data_hash")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RawDataHistory")
                        .HasColumnName("raw_data_history")
                        .HasColumnType("json");

                    b.Property<int?>("ReplyToMessageId")
                        .HasColumnName("reply_to_message_id")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnName("message_text")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("MessageTypeCode");

                    b.HasIndex("MessengerCode");

                    b.HasIndex("ReplyToMessageId");

                    b.HasIndex("UserId");

                    b.ToTable("messages","bot");
                });

            modelBuilder.Entity("Zs.Bot.Model.MessageType", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnName("message_type_code")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<DateTime>("InsertDate")
                        .HasColumnName("insert_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("message_type_name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Code");

                    b.ToTable("message_types","bot");
                });

            modelBuilder.Entity("Zs.Bot.Model.MessengerInfo", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnName("messenger_code")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<DateTime>("InsertDate")
                        .HasColumnName("insert_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("messenger_name")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Code");

                    b.ToTable("messengers","bot");
                });

            modelBuilder.Entity("Zs.Bot.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FullName")
                        .HasColumnName("user_full_name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("InsertDate")
                        .HasColumnName("insert_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsBot")
                        .HasColumnName("user_is_bot")
                        .HasColumnType("bool");

                    b.Property<string>("Name")
                        .HasColumnName("user_name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RawData")
                        .IsRequired()
                        .HasColumnName("raw_data")
                        .HasColumnType("json");

                    b.Property<string>("RawDataHash")
                        .IsRequired()
                        .HasColumnName("raw_data_hash")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RawDataHistory")
                        .HasColumnName("raw_data_history")
                        .HasColumnType("json");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserRoleCode")
                        .IsRequired()
                        .HasColumnName("user_role_code")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("UserRoleCode");

                    b.ToTable("users","bot");
                });

            modelBuilder.Entity("Zs.Bot.Model.UserRole", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnName("user_role_code")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("InsertDate")
                        .HasColumnName("insert_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("user_role_name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnName("user_role_permissions")
                        .HasColumnType("json");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Code");

                    b.ToTable("user_roles","bot");
                });

            modelBuilder.Entity("Zs.Service.ChatAdmin.Model.Accounting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("accounting_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("accounting_start_date")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("accountings","zl");
                });

            modelBuilder.Entity("Zs.Service.ChatAdmin.Model.AuxiliaryWord", b =>
                {
                    b.Property<string>("TheWord")
                        .HasColumnName("the_word")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("insert_date")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("TheWord");

                    b.ToTable("auxiliary_words","zl");
                });

            modelBuilder.Entity("Zs.Service.ChatAdmin.Model.Ban", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ban_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ChatId")
                        .HasColumnName("chat_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnName("ban_finish_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("insert_date")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("MessageId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.Property<int?>("WarningMessageId")
                        .HasColumnName("warning_message_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("bans","zl");
                });

            modelBuilder.Entity("Zs.Service.ChatAdmin.Model.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("notification_id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Day")
                        .HasColumnName("notification_day")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ExecDate")
                        .HasColumnName("notification_exec_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Hour")
                        .HasColumnName("notification_hour")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("insert_date")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsActive")
                        .HasColumnName("notification_is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnName("notification_message")
                        .HasColumnType("character varying(2000)")
                        .HasMaxLength(2000);

                    b.Property<int>("Minute")
                        .HasColumnName("notification_minute")
                        .HasColumnType("integer");

                    b.Property<int?>("Month")
                        .HasColumnName("notification_month")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("update_date")
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("notifications","zl");
                });

            modelBuilder.Entity("Zs.Bot.Model.Bot", b =>
                {
                    b.HasOne("Zs.Bot.Model.MessengerInfo", "Messenger")
                        .WithMany("Bots")
                        .HasForeignKey("MessengerCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Zs.Bot.Model.Chat", b =>
                {
                    b.HasOne("Zs.Bot.Model.ChatType", "ChatType")
                        .WithMany("Chats")
                        .HasForeignKey("ChatTypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Zs.Bot.Model.Message", b =>
                {
                    b.HasOne("Zs.Bot.Model.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zs.Bot.Model.MessageType", "MessageType")
                        .WithMany("Messages")
                        .HasForeignKey("MessageTypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zs.Bot.Model.MessengerInfo", "Messenger")
                        .WithMany("Messages")
                        .HasForeignKey("MessengerCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zs.Bot.Model.Message", "ReplyToMessage")
                        .WithMany()
                        .HasForeignKey("ReplyToMessageId");

                    b.HasOne("Zs.Bot.Model.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Zs.Bot.Model.User", b =>
                {
                    b.HasOne("Zs.Bot.Model.UserRole", "UserRoles")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Zs.Service.ChatAdmin.Model.Ban", b =>
                {
                    b.HasOne("Zs.Bot.Model.Chat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Zs.Bot.Model.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId");

                    b.HasOne("Zs.Bot.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
