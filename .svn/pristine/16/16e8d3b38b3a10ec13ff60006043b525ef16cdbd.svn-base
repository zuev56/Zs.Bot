using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Zs.Bot.DbModel;

namespace UnitTest.NETCore
{
    [TestClass]
    public class DbModelTest : TestBase
    {
        [TestMethod]
        public void DbModel_SelectTest()
        {
            try
            {
                using (var ctx = new RobotDbContext())
                {
                    Assert.IsNotNull(ctx.Chats.FirstOrDefault());
                    Assert.IsNotNull(ctx.Log.FirstOrDefault());
                    Assert.IsNotNull(ctx.MessageTypes.FirstOrDefault());
                    Assert.IsNotNull(ctx.ReceivedMessages.FirstOrDefault());
                    Assert.IsNotNull(ctx.Roles.FirstOrDefault());
                    Assert.IsNotNull(ctx.SentMessages.FirstOrDefault());
                    Assert.IsNotNull(ctx.Sessions.FirstOrDefault());
                    Assert.IsNotNull(ctx.Users.FirstOrDefault());
                    Assert.IsNotNull(ctx.Commands.FirstOrDefault());
                    //Assert.IsNotNull(ctx.SqlResults.FirstOrDefault()); Не таблица БД
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [TestMethod]
        public void DbModel_UpdateTest()
        {
            try
            {
                using (var ctx = new RobotDbContext())
                {
                    // Получаем первые элементы из таблиц
                    var chat            = ctx.Chats.FirstOrDefault();
                    var role            = ctx.Roles.FirstOrDefault();
                    var user            = ctx.Users.FirstOrDefault();
                    var messageType     = ctx.MessageTypes.FirstOrDefault();
                    var receivedMessage = ctx.ReceivedMessages.FirstOrDefault();
                    var sentMessage     = ctx.SentMessages.FirstOrDefault();
                    var session         = ctx.Sessions.FirstOrDefault();
                    var log             = ctx.Log.FirstOrDefault();
                    var command         = ctx.Commands.FirstOrDefault();

                    // Берём их ключи
                    var chatId          = chat.ChatId;
                    var roleName        = role.RoleName;
                    var userId          = user.UserId;
                    var messegeTypeName = messageType.MessageTypeName;
                    var receiverMsgId   = receivedMessage.ReceivedMsgId;
                    var sentMsgId       = sentMessage.SentMsgId;
                    var sessionId       = session.SessionId;
                    var logId           = log.LogId;
                    var commandName     = command.CommandName;
                    
                    // Меняем их дату
                    var newUpdateDate = DateTime.Now;
                    chat.UpdateDate            = newUpdateDate;
                    role.UpdateDate            = newUpdateDate;
                    user.UpdateDate            = newUpdateDate;
                    messageType.UpdateDate     = newUpdateDate;
                    receivedMessage.UpdateDate = newUpdateDate;
                    sentMessage.UpdateDate     = newUpdateDate;
                    session.UpdateDate         = newUpdateDate;
                    log.UpdateDate             = newUpdateDate;
                    command.UpdateDate         = newUpdateDate;

                    // Сохраняем
                    //ctx.Chats.Update(chat);
                    //ctx.Roles.Update(role);
                    //ctx.Users.Update(user);
                    //ctx.MessageTypes.Update(messageType);
                    //ctx.ReceivedMessages.Update(receivedMessage);
                    //ctx.SentMessages.Update(sentMessage);
                    //ctx.Sessions.Update(session);
                    //ctx.Log.Update(log);Update
                    //ctx.Commands.Update(command);

                    ctx.SaveChanges();

                    // Проверяем
                    Assert.IsTrue(newUpdateDate == ctx.Chats.First(i => i.ChatId == chatId).UpdateDate);
                    Assert.IsTrue(newUpdateDate == ctx.Roles.First(r => r.RoleName == roleName).UpdateDate);
                    Assert.IsTrue(newUpdateDate == ctx.Users.First(u => u.UserId == userId).UpdateDate);
                    Assert.IsTrue(newUpdateDate == ctx.MessageTypes.First(t => t.MessageTypeName == messegeTypeName).UpdateDate);
                    Assert.IsTrue(newUpdateDate == ctx.ReceivedMessages.First(m => m.ReceivedMsgId == receiverMsgId).UpdateDate);
                    Assert.IsTrue(newUpdateDate == ctx.SentMessages.First(m => m.SentMsgId == sentMsgId).UpdateDate);
                    Assert.IsTrue(newUpdateDate == ctx.Sessions.First(s => s.SessionId == sessionId).UpdateDate);
                    Assert.IsTrue(newUpdateDate == ctx.Log.First(l => l.LogId == logId).UpdateDate);
                    Assert.IsTrue(newUpdateDate == ctx.Commands.First(c => c.CommandName == commandName).UpdateDate);
                                        
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [TestMethod]
        public void DbModel_InsertDeleteTest()
        {
            try
            {
                // Создаём объекты
                var chat            = new DbChat() { ChatTitle = "UnitTest", IsSubscribed = false };
                var role            = new OLD_DbRole() { RoleName = "UnitTest" };
                var user            = new DbUser() { UserName = "UnitTest", RoleName = "User" };
                var messageType     = new DbMessageType() { MessageTypeName = "UnitTest" };
                var receivedMessage = new DbReceivedMsg() { ReceivedMsgText = "UnitTest", ReceivedMsgMessageId = 99999999, ChatId = 210281448, UserId = 210281448, MessageTypeName = "Text", IsDeleted = false };
                var sentMessage     = new DbSentMsg() { SentMsgText = "UnitTest", ChatId = 210281448, MessageTypeName = "Text" };
                var session         = new DbSession() { SessionCurrentStep = "UnitTest", ChatId = 210281448, SessionIsLoggedIn = false };
                var log             = new DbLog() { LogMessage = "UnitTest" };
                var command         = new DbCommand() { CommandName = "/unittest", CommandScript = "UnitTest", RoleList = "UnitTest" };

                // Сохранение в БД
                using (var ctx = new RobotDbContext())
                {
                    ctx.Chats.Add(chat);
                    ctx.Roles.Add(role);
                    ctx.Users.Add(user);
                    ctx.MessageTypes.Add(messageType);
                    ctx.ReceivedMessages.Add(receivedMessage);
                    ctx.SentMessages.Add(sentMessage);
                    ctx.Sessions.Add(session);
                    ctx.Log.Add(log);
                    ctx.Commands.Add(command);

                    ctx.SaveChanges();
                }

                // Удаление из БД
                using (var ctx = new RobotDbContext())
                {
                    ctx.Chats.Remove(chat);
                    ctx.Roles.Remove(role);
                    ctx.Users.Remove(user);
                    ctx.MessageTypes.Remove(messageType);
                    ctx.ReceivedMessages.Remove(receivedMessage);
                    ctx.SentMessages.Remove(sentMessage);
                    ctx.Sessions.Remove(session);
                    ctx.Log.Remove(log);
                    ctx.Commands.Remove(command);

                    ctx.SaveChanges();
                }
            }
            catch (Exception ex)
            {
                throw ex;

                // Для очистки БД в случае сбоя теста
                // delete FROM rmgr."Chat"        where "ChatTitle"          = 'UnitTest';
                // delete FROM rmgr."Role"        where "RoleName"           = 'UnitTest';
                // delete FROM rmgr."User"        where "UserName"           = 'UnitTest';
                // delete FROM rmgr."MessageType" where "MessageTypeName"    = 'UnitTest';
                // delete FROM rmgr."ReceivedMsg" where "ReceivedMsgText"    = 'UnitTest';
                // delete FROM rmgr."SentMsg"     where "SentMsgText"        = 'UnitTest';
                // delete FROM rmgr."Session"     where "SessionCurrentStep" = 'UnitTest';
                // delete FROM rmgr."Log"         where "LogMessage"         = 'UnitTest';
                // delete FROM rmgr."Command"     where "CommandName"        = '/unittest';

            }
        }

    }
}
