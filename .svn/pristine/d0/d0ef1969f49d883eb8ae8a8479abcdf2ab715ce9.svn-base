
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace Zs.Bot.Model.Db
{
    // Базовые сущности для всех ботов
    #region Interfaces bot

    /// <summary> Данные отдельного бота </summary>
    public interface IDbBot
    {
        public Int32 BotId { get; set; }

        public String MessengerCode { get; set; }

        public String BotName { get; set; }

        public String BotToken { get; set; }

        public String BotDescription { get; set; }

        public DateTime UpdateDate { get; set; }

        public DateTime InsertDate { get; set; }

    }



    /// <summary> Тип чата (группа, тет-а-тет, канал и т.д.) </summary>
    public interface IDbChatType
    {
        public String ChatTypeCode { get; set; }

        public String ChatTypeName { get; set; }

        public DateTime UpdateDate { get; set; }

        public DateTime InsertDate { get; set; }

    }



    /// <summary> Чат... </summary>
    public interface IDbChat
    {
        public Int32 ChatId { get; set; }

        public String ChatTitle { get; set; }

        public String ChatDescription { get; set; }

        public String ChatType { get; set; }

        public String RawData { get; set; }

        public DateTime UpdateDate { get; set; }

        public DateTime InsertDate { get; set; }

    }



    /// <summary> Параметры приложения </summary>
    public interface IDbCommand
    {
        public String CommandName { get; set; }

        public String CommandScript { get; set; }

        public String CommandDefaultArgs { get; set; }

        public String CommandDesc { get; set; }

        public String CommandGroup { get; set; }

        public DateTime UpdateDate { get; set; }

        public DateTime InsertDate { get; set; }

    }



    /// <summary> Журнал программы </summary>
    public interface IDbLog
    {
        public Int64 LogId { get; set; }

        public String LogType { get; set; }

        public String LogGroup { get; set; }

        public String LogMessage { get; set; }

        public String LogData { get; set; }

        public String LogMethod { get; set; }

        public Int32 MessageId { get; set; }

        public DateTime InsertDate { get; set; }

    }



    /// <summary> Типы сообщений </summary>
    public interface IDbMessageType
    {
        public String MessageTypeCode { get; set; }

        public String MessageTypeName { get; set; }

        public DateTime UpdateDate { get; set; }

        public DateTime InsertDate { get; set; }

    }



    /// <summary> Система обмена сообщениями </summary>
    public interface IDbMessenger
    {
        public String MessengerCode { get; set; }

        public String MessengerName { get; set; }

        public DateTime UpdateDate { get; set; }

        public DateTime InsertDate { get; set; }

    }



    public interface IDbOption
    {
        public String OptionName { get; set; }

        public String OptionValue { get; set; }

        public String OptionGroup { get; set; }

        public String OptionDescription { get; set; }

        public DateTime UpdateDate { get; set; }

        public DateTime InsertDate { get; set; }

    }



    /// <summary> Принятые сообщения </summary>
    public interface IDbReceivedMessage
    {
        public Int64 ReceivedMessageId { get; set; }

        public String MessengerCode { get; set; }

        public String MessageTypeCode { get; set; }

        public Int32 UserId { get; set; }

        public Int32 ChatId { get; set; }

        public String ReceivedMessageText { get; set; }

        public String RawData { get; set; }

        public DateTime UpdateDate { get; set; }

        public DateTime InsertDate { get; set; }

    }



    /// <summary> Сессии пользователей - обслуживают последовательное общение с ботом </summary>
    public interface IDbSession
    {
        public Int32 SessionId { get; set; }

        public Int32 ChatId { get; set; }

        public Boolean SessionIsLoggedIn { get; set; }

        public String SessionCurrentState { get; set; }

        public DateTime UpdateDate { get; set; }

        public DateTime InsertDate { get; set; }

    }



    /// <summary> Пользователи - участники чатов </summary>
    public interface IDbUserRole
    {
        public String UserRoleCode { get; set; }

        public String UserRoleName { get; set; }

        public String UserRolePermissions { get; set; }

        public DateTime UpdateDate { get; set; }

        public DateTime InsertDate { get; set; }

    }



    public interface IDbUser
    {
        public Int32 UserId { get; set; }

        public String UserName { get; set; }

        public String UserFullName { get; set; }

        public String UserRoleCode { get; set; }

        public Boolean UserIsBot { get; set; }

        public String RawData { get; set; }

        public DateTime UpdateDate { get; set; }

        public DateTime InsertDate { get; set; }

    }


    #endregion
    // Сущности бота-администратора чата ЗимаЛето
    #region Interfaces zl

    /// <summary> Информация о времени начала учёта сообщений каждого отдельного пользователя </summary>
    public interface IDbAccounting
    {
        public Int32 AccountingId { get; set; }

        public DateTime AccountingStartDate { get; set; }

        public DateTime UpdateDate { get; set; }

    }



    /// <summary> Вспомогательные слова - то, что должно быть отсеяно из статистики </summary>
    public interface IDbAuxiliaryWord
    {
        public String TheWord { get; set; }

        public DateTime InsertDate { get; set; }

    }



    /// <summary> Информация о банах </summary>
    public interface IDbBan
    {
        public Int32 BanId { get; set; }

        public Int32 UserId { get; set; }

        public Int32 ChatId { get; set; }

        public Boolean BanHasWarned { get; set; }

        public DateTime BanFinishDate { get; set; }

        public Boolean BanIsActive { get; set; }

        public DateTime UpdateDate { get; set; }

        public DateTime InsertDate { get; set; }

    }



    /// <summary> Напоминание о событиях </summary>
    public interface IDbNotification
    {
        public Int32 NotificationId { get; set; }

        public Boolean NotificationIsActive { get; set; }

        public String NotificationMessage { get; set; }

        public Int32 NotificationMonth { get; set; }

        public Int32 NotificationDay { get; set; }

        public Int32 NotificationHour { get; set; }

        public Int32 NotificationMinute { get; set; }

        public DateTime NotificationExecDate { get; set; }

        public DateTime UpdateDate { get; set; }

        public DateTime InsertDate { get; set; }

    }


    #endregion
    // Базовые сущности для всех ботов
    #region Classes bot

    /// <summary> Данные отдельного бота </summary>
    [Table("bots", Schema = "bot")]
    public partial class DbBot : IDbBot
    {
        [Key]
        [Column("bot_id")]
        public Int32 BotId { get; set; }

        [Column("messenger_code")]
        public String MessengerCode { get; set; }

        [Column("bot_name")]
        public String BotName { get; set; }

        [Column("bot_token")]
        public String BotToken { get; set; }

        [Column("bot_description")]
        public String BotDescription { get; set; }

        [Column("update_date")]
        public DateTime UpdateDate { get; set; }

        [Column("insert_date")]
        public DateTime InsertDate { get; set; }

    }



    /// <summary> Тип чата (группа, тет-а-тет, канал и т.д.) </summary>
    [Table("chat_types", Schema = "bot")]
    public partial class DbChatType : IDbChatType
    {
        [Key]
        [Column("chat_type_code")]
        public String ChatTypeCode { get; set; }

        [Column("chat_type_name")]
        public String ChatTypeName { get; set; }

        [Column("update_date")]
        public DateTime UpdateDate { get; set; }

        [Column("insert_date")]
        public DateTime InsertDate { get; set; }

    }



    /// <summary> Чат... </summary>
    [Table("chats", Schema = "bot")]
    public partial class DbChat : IDbChat
    {
        [Key]
        [Column("chat_id")]
        public Int32 ChatId { get; set; }

        [Column("chat_title")]
        public String ChatTitle { get; set; }

        [Column("chat_description")]
        public String ChatDescription { get; set; }

        [Column("chat_type")]
        public String ChatType { get; set; }

        [Column("raw_data")]
        public String RawData { get; set; }

        [Column("update_date")]
        public DateTime UpdateDate { get; set; }

        [Column("insert_date")]
        public DateTime InsertDate { get; set; }

    }



    /// <summary> Параметры приложения </summary>
    [Table("commands", Schema = "bot")]
    public partial class DbCommand : IDbCommand
    {
        [Key]
        [Column("command_name")]
        public String CommandName { get; set; }

        [Column("command_script")]
        public String CommandScript { get; set; }

        [Column("command_default_args")]
        public String CommandDefaultArgs { get; set; }

        [Column("command_desc")]
        public String CommandDesc { get; set; }

        [Column("command_group")]
        public String CommandGroup { get; set; }

        [Column("update_date")]
        public DateTime UpdateDate { get; set; }

        [Column("insert_date")]
        public DateTime InsertDate { get; set; }

    }



    /// <summary> Журнал программы </summary>
    [Table("logs", Schema = "bot")]
    public partial class DbLog : IDbLog
    {
        [Key]
        [Column("log_id")]
        public Int64 LogId { get; set; }

        [Column("log_type")]
        public String LogType { get; set; }

        [Column("log_group")]
        public String LogGroup { get; set; }

        [Column("log_message")]
        public String LogMessage { get; set; }

        [Column("log_data")]
        public String LogData { get; set; }

        [Column("log_method")]
        public String LogMethod { get; set; }

        [Column("message_id")]
        public Int32 MessageId { get; set; }

        [Column("insert_date")]
        public DateTime InsertDate { get; set; }

    }



    /// <summary> Типы сообщений </summary>
    [Table("message_types", Schema = "bot")]
    public partial class DbMessageType : IDbMessageType
    {
        [Key]
        [Column("message_type_code")]
        public String MessageTypeCode { get; set; }

        [Column("message_type_name")]
        public String MessageTypeName { get; set; }

        [Column("update_date")]
        public DateTime UpdateDate { get; set; }

        [Column("insert_date")]
        public DateTime InsertDate { get; set; }

    }



    /// <summary> Система обмена сообщениями </summary>
    [Table("messengers", Schema = "bot")]
    public partial class DbMessenger : IDbMessenger
    {
        [Key]
        [Column("messenger_code")]
        public String MessengerCode { get; set; }

        [Column("messenger_name")]
        public String MessengerName { get; set; }

        [Column("update_date")]
        public DateTime UpdateDate { get; set; }

        [Column("insert_date")]
        public DateTime InsertDate { get; set; }

    }



    [Table("options", Schema = "bot")]
    public partial class DbOption : IDbOption
    {
        [Key]
        [Column("option_name")]
        public String OptionName { get; set; }

        [Column("option_value")]
        public String OptionValue { get; set; }

        [Column("option_group")]
        public String OptionGroup { get; set; }

        [Column("option_description")]
        public String OptionDescription { get; set; }

        [Column("update_date")]
        public DateTime UpdateDate { get; set; }

        [Column("insert_date")]
        public DateTime InsertDate { get; set; }

    }



    /// <summary> Принятые сообщения </summary>
    [Table("received_messages", Schema = "bot")]
    public partial class DbReceivedMessage : IDbReceivedMessage
    {
        [Key]
        [Column("received_message_id")]
        public Int64 ReceivedMessageId { get; set; }

        [Column("messenger_code")]
        public String MessengerCode { get; set; }

        [Column("message_type_code")]
        public String MessageTypeCode { get; set; }

        [Column("user_id")]
        public Int32 UserId { get; set; }

        [Column("chat_id")]
        public Int32 ChatId { get; set; }

        [Column("received_message_text")]
        public String ReceivedMessageText { get; set; }

        [Column("raw_data")]
        public String RawData { get; set; }

        [Column("update_date")]
        public DateTime UpdateDate { get; set; }

        [Column("insert_date")]
        public DateTime InsertDate { get; set; }

    }



    /// <summary> Сессии пользователей - обслуживают последовательное общение с ботом </summary>
    [Table("sessions", Schema = "bot")]
    public partial class DbSession : IDbSession
    {
        [Key]
        [Column("session_id")]
        public Int32 SessionId { get; set; }

        [Column("chat_id")]
        public Int32 ChatId { get; set; }

        [Column("session_is_logged_in")]
        public Boolean SessionIsLoggedIn { get; set; }

        [Column("session_current_state")]
        public String SessionCurrentState { get; set; }

        [Column("update_date")]
        public DateTime UpdateDate { get; set; }

        [Column("insert_date")]
        public DateTime InsertDate { get; set; }

    }



    /// <summary> Пользователи - участники чатов </summary>
    [Table("user_roles", Schema = "bot")]
    public partial class DbUserRole : IDbUserRole
    {
        [Key]
        [Column("user_role_code")]
        public String UserRoleCode { get; set; }

        [Column("user_role_name")]
        public String UserRoleName { get; set; }

        [Column("user_role_permissions")]
        public String UserRolePermissions { get; set; }

        [Column("update_date")]
        public DateTime UpdateDate { get; set; }

        [Column("insert_date")]
        public DateTime InsertDate { get; set; }

    }



    [Table("users", Schema = "bot")]
    public partial class DbUser : IDbUser
    {
        [Key]
        [Column("user_id")]
        public Int32 UserId { get; set; }

        [Column("user_name")]
        public String UserName { get; set; }

        [Column("user_full_name")]
        public String UserFullName { get; set; }

        [Column("user_role_code")]
        public String UserRoleCode { get; set; }

        [Column("user_is_bot")]
        public Boolean UserIsBot { get; set; }

        [Column("raw_data")]
        public String RawData { get; set; }

        [Column("update_date")]
        public DateTime UpdateDate { get; set; }

        [Column("insert_date")]
        public DateTime InsertDate { get; set; }

    }


    #endregion
    // Сущности бота-администратора чата ЗимаЛето
    #region Classes zl

    /// <summary> Информация о времени начала учёта сообщений каждого отдельного пользователя </summary>
    [Table("accountings", Schema = "zl")]
    public partial class DbAccounting : IDbAccounting
    {
        [Key]
        [Column("accounting_id")]
        public Int32 AccountingId { get; set; }

        [Column("accounting_start_date")]
        public DateTime AccountingStartDate { get; set; }

        [Column("update_date")]
        public DateTime UpdateDate { get; set; }

    }



    /// <summary> Вспомогательные слова - то, что должно быть отсеяно из статистики </summary>
    [Table("auxiliary_words", Schema = "zl")]
    public partial class DbAuxiliaryWord : IDbAuxiliaryWord
    {
        [Key]
        [Column("the_word")]
        public String TheWord { get; set; }

        [Column("insert_date")]
        public DateTime InsertDate { get; set; }

    }



    /// <summary> Информация о банах </summary>
    [Table("bans", Schema = "zl")]
    public partial class DbBan : IDbBan
    {
        [Key]
        [Column("ban_id")]
        public Int32 BanId { get; set; }

        [Column("user_id")]
        public Int32 UserId { get; set; }

        [Column("chat_id")]
        public Int32 ChatId { get; set; }

        [Column("ban_has_warned")]
        public Boolean BanHasWarned { get; set; }

        [Column("ban_finish_date")]
        public DateTime BanFinishDate { get; set; }

        [Column("ban_is_active")]
        public Boolean BanIsActive { get; set; }

        [Column("update_date")]
        public DateTime UpdateDate { get; set; }

        [Column("insert_date")]
        public DateTime InsertDate { get; set; }

    }



    /// <summary> Напоминание о событиях </summary>
    [Table("notifications", Schema = "zl")]
    public partial class DbNotification : IDbNotification
    {
        [Key]
        [Column("notification_id")]
        public Int32 NotificationId { get; set; }

        [Column("notification_is_active")]
        public Boolean NotificationIsActive { get; set; }

        [Column("notification_message")]
        public String NotificationMessage { get; set; }

        [Column("notification_month")]
        public Int32 NotificationMonth { get; set; }

        [Column("notification_day")]
        public Int32 NotificationDay { get; set; }

        [Column("notification_hour")]
        public Int32 NotificationHour { get; set; }

        [Column("notification_minute")]
        public Int32 NotificationMinute { get; set; }

        [Column("notification_exec_date")]
        public DateTime NotificationExecDate { get; set; }

        [Column("update_date")]
        public DateTime UpdateDate { get; set; }

        [Column("insert_date")]
        public DateTime InsertDate { get; set; }

    }


    #endregion

    public partial class RobotDbContext : DbContext
    {
        public DbSet<DbBot> Bots { get; set; }
        public DbSet<DbChatType> ChatTypes { get; set; }
        public DbSet<DbChat> Chats { get; set; }
        public DbSet<DbCommand> Commands { get; set; }
        public DbSet<DbLog> Logs { get; set; }
        public DbSet<DbMessageType> MessageTypes { get; set; }
        public DbSet<DbMessenger> Messengers { get; set; }
        public DbSet<DbOption> Options { get; set; }
        public DbSet<DbReceivedMessage> ReceivedMessages { get; set; }
        public DbSet<DbSession> Sessions { get; set; }
        public DbSet<DbUserRole> UserRoles { get; set; }
        public DbSet<DbUser> Users { get; set; }
        public DbSet<DbAccounting> Accountings { get; set; }
        public DbSet<DbAuxiliaryWord> AuxiliaryWords { get; set; }
        public DbSet<DbBan> Bans { get; set; }
        public DbSet<DbNotification> Notifications { get; set; }
    }

}