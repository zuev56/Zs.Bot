using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using Microsoft.EntityFrameworkCore;
using Zs.Bot.Helpers;
using Zs.Bot.Model.Db;
using Zs.Bot.Modules.Command;
using Zs.Bot.Modules.Messaging;
using Zs.Common.Enums;
using Zs.Common.Interfaces;
using Zs.Common.Modules;

namespace Zs.Bot
{
    /// <summary>
    /// Обёртка над Telegram.Bot
    /// </summary>
    public class ZsBot : ModuleBase
    {
        private readonly IModuleConfiguration _configuration;
        private static readonly DbContextOptionsBuilder<RobotDbContext> _zsBotOptionsBuilder = new DbContextOptionsBuilder<RobotDbContext>();

        private readonly Logger _logger = Logger.GetInstance();

        /// <summary> Модуль для упарвления командами </summary>
        public CommandManager CommandManager { get; set; }

        /// <summary> Модуль для упарвления сообщениями </summary>
        public IMessenger Messenger { get; set; }


        protected ZsBot(
              IModuleConfiguration configuration
            , IMessenger messenger)
            //, string token
            //, IWebProxy webProxy)
        {
            try
            {
                if (configuration == null)
                    throw new ArgumentNullException(nameof(configuration));

                if (messenger == null)
                    throw new ArgumentNullException(nameof(messenger));

                _configuration = configuration;

                Messenger = messenger;
                Messenger.InputMessageProcessed += Messenger_InputMessageProcess;

                CommandManager = CommandManager.GetInstance();
                CommandManager.OnCommandCompleted += CommandManager_OnCommandCompleted;
            }
            catch (Exception ex)
            {
                throw new TypeInitializationException(nameof(ZsBot), ex);
            }
        }

        /// <summary> Действие на выполнение команды </summary>
        private void CommandManager_OnCommandCompleted(CommandResult result)
        {
            IDbChat chat = null;// GetChat(result.ReturnAddress);

            Messenger.AddMessageToOutbox(chat, result.Text);
        }


        private void Messenger_InputMessageProcess(object returnAddress, string messageText)
        {
            // 1. Проверка авторизации
            //if (!Authorization(tgMessage) && session.SessionCurrentStep != IsWaitingForPassword)
            //    return;

            // 2. Обрабатываем в зависимости от того, команда это или данные                           
            if (BotCommand.IsCommand(messageText))
            {
                var botCommand = BotCommand.ParseMessage(returnAddress, messageText);
                CommandManager.EnqueueCommand(botCommand);
            }
            else
            {

            }
        }

        /// <summary> Получение нового экземпляра бота (оболочки бота) </summary>
        public static ZsBot CreateNew(IModuleConfiguration configuration, IMessenger messenger)// string token, string password, IWebProxy webProxy)
        {
            //if (string.IsNullOrWhiteSpace(token))
            //    throw new ArgumentException($"Аргумент {nameof(token)} не может быть пустым или состоять из пробелов!");
            
            return new ZsBot(configuration, messenger);//, token, webProxy);
        }


        /// <summary> Запуск бота </summary>
        public override void Start(int delay)
        {
            try
            {
                Thread.Sleep(delay);

                // Инициализация контекста данных
                _zsBotOptionsBuilder.UseNpgsql(_configuration.ConnectionString);
                RobotDbContext.Initialize(_zsBotOptionsBuilder.Options, _logger);

                CommandManager.Start(500);
                //Messenger.Start(500);
            }
            catch (Exception ex)
            {
                _logger.SaveToDb("ОШИБКА! Запуск бота", ex);
            }
        }

        /// <summary> Остановка бота </summary>
        public override void Stop(int delay = 0)
        {
            try
            {
                _logger.LogInfo("Запрос на остановку службы", "Остановка службы");
                
                CommandManager.Stop();
                //Messenger.Stop();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex);
            }
            finally
            {
                _logger.LogInfo("Служба успешно завершена", "Остановка службы");
            }
        }


        /// <summary> Получение списка пользователей заданных ролей </summary>
        public static List<int> GetUsersIdByRole(params UserRole[] userRoles)
        {
            var users = new List<DbUser>();

            if (userRoles != null && userRoles.Length != 0)
            {
                using var ctx = new RobotDbContext();

                throw new NotImplementedException("Раскомментировать текст ниже после восстановления модели данных");
                //var necessaryUsers = ctx.Users
                //    .Where(u => userRoles.Cast<string>().Contains(u.UserRoleCode));
                //
                //foreach (var user in necessaryUsers)
                //    users.Add(user);
            }
            return users.Select(u => u.UserId).ToList();
        }

    }
}
