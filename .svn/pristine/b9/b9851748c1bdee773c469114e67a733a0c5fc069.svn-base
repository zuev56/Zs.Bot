


CREATE TABLE bot.chat_types (
    chat_type_code varchar(10) NOT NULL PRIMARY KEY,
    chat_type_name varchar(10) NOT NULL,
    update_date    timestamptz NOT NULL DEFAULT now(),
    insert_date    timestamptz NOT NULL DEFAULT now()
);
CREATE TRIGGER chat_types_reset_update_date BEFORE UPDATE
ON bot.chat_types FOR EACH ROW EXECUTE PROCEDURE helper.reset_update_date();



CREATE TABLE bot.chats (
    chat_id          serial        NOT NULL PRIMARY KEY,
    chat_title       varchar(50)   NOT NULL,
    chat_description varchar(100)      NULL,
    chat_type        varchar(10)   NOT NULL REFERENCES bot.chat_types(chat_type_code) DEFAULT('UNDEFINED'),
    raw_data         json          NOT NULL,
    update_date      timestamptz   NOT NULL DEFAULT now(),
    insert_date      timestamptz   NOT NULL DEFAULT now()
    
    --"ChatFirstName"                   varchar(50)      NULL,
    --"ChatLastName"                    varchar(50)      NULL,
    --"ChatDescription"                 varchar(100)     NULL,
    --"ChatType"                        varchar(50)      NULL,
    --"ChatInviteLink"                  varchar(10)      NULL,
    --"ChatUserName"                    varchar(50)      NULL,
    --"ChatAllMembersAreAdministrators" bool             NULL,
    --"ChatCanSetStickerSet"            bool             NULL,
    --"ChatStickerSetName"              varchar(50)      NULL,
    --"PinnedMessageId"                 int              NULL,
    --
    --"IsSubscribed"                    bool         NOT NULL,
    --"InsertDate"                      timestamptz  NOT NULL DEFAULT now(),    
    --"UpdateDate"                      timestamptz  NOT NULL DEFAULT now()
);
CREATE TRIGGER chats_reset_update_date BEFORE UPDATE
ON bot.chats FOR EACH ROW EXECUTE PROCEDURE helper.reset_update_date();



CREATE TABLE bot.user_roles (
    user_role_code    varchar(10)  NOT NULL PRIMARY KEY,
    user_role_name    varchar(50)  NOT NULL,
    user_role_actions varchar(200) NOT NULL, -- в т.ч. команды (command_group)
    update_date       timestamptz  NOT NULL DEFAULT now(),
    insert_date       timestamptz  NOT NULL DEFAULT now()
);
CREATE TRIGGER user_roles_reset_update_date BEFORE UPDATE
ON bot.user_roles FOR EACH ROW EXECUTE PROCEDURE helper.reset_update_date();

INSERT INTO bot.user_roles(user_role_code, user_role_name, user_role_actions) VALUES('ADMIN',     'Administrator', '');
INSERT INTO bot.user_roles(user_role_code, user_role_name, user_role_actions) VALUES('MODERATOR', 'Moderator',     '');
INSERT INTO bot.user_roles(user_role_code, user_role_name, user_role_actions) VALUES('USER',      'User',          '');



CREATE TABLE bot.users (
    user_id        serial        NOT NULL PRIMARY KEY,
    user_name      varchar(50)   NOT NULL,
    user_full_name varchar(50)       NULL,
    user_role_code varchar(10)   NOT NULL REFERENCES bot.user_roles(user_role_code),
    user_is_bot    bool          NOT NULL DEFAULT false,
    raw_data       json          NOT NULL,
    update_date    timestamptz   NOT NULL DEFAULT now(),
    insert_date    timestamptz   NOT NULL DEFAULT now()    
    --"UserFirstName"  varchar(50)     NULL,
    --"UserLastName"   varchar(50)     NULL,
    --"RoleName"       varchar(50) NOT NULL REFERENCES bot."Role"("RoleName"),
    --"IsBot"          bool            NULL,
    --"UpdateDate"     timestamptz NOT NULL DEFAULT now(),
    --"InsertDate"     timestamptz NOT NULL DEFAULT now()
);
CREATE TRIGGER users_reset_update_date BEFORE UPDATE
ON bot.users FOR EACH ROW EXECUTE PROCEDURE helper.reset_update_date();



CREATE TABLE bot.message_types (
    message_type_code varchar(3)  NOT NULL PRIMARY KEY,
    message_type_name varchar(50) NOT NULL,
    update_date       timestamptz NOT NULL DEFAULT now(),
    insert_date       timestamptz NOT NULL DEFAULT now()
);
CREATE TRIGGER message_types_reset_update_date BEFORE UPDATE
ON bot.message_types FOR EACH ROW EXECUTE PROCEDURE helper.reset_update_date();

INSERT INTO bot.message_types(message_type_code, message_type_name) VALUES('UKN', 'Unknown');
INSERT INTO bot.message_types(message_type_code, message_type_name) VALUES('TXT', 'Text');
INSERT INTO bot.message_types(message_type_code, message_type_name) VALUES('PHT', 'Photo');
INSERT INTO bot.message_types(message_type_code, message_type_name) VALUES('AUD', 'Audio');
INSERT INTO bot.message_types(message_type_code, message_type_name) VALUES('VID', 'Video');
INSERT INTO bot.message_types(message_type_code, message_type_name) VALUES('VOI', 'Voice');
INSERT INTO bot.message_types(message_type_code, message_type_name) VALUES('DOC', 'Document');
INSERT INTO bot.message_types(message_type_code, message_type_name) VALUES('STK', 'Sticker');
INSERT INTO bot.message_types(message_type_code, message_type_name) VALUES('LOC', 'Location');
INSERT INTO bot.message_types(message_type_code, message_type_name) VALUES('CNT', 'Contact');
INSERT INTO bot.message_types(message_type_code, message_type_name) VALUES('SRV', 'Service message');
INSERT INTO bot.message_types(message_type_code, message_type_name) VALUES('OTH', 'Other type');
--INSERT INTO bot.message_types(message_type_code, message_type_code) VALUES('VideoNote','VideoNote');
--INSERT INTO bot.message_types(message_type_code, message_type_code) VALUES('Game');
--INSERT INTO bot.message_types(message_type_code, message_type_code) VALUES('Venue');
--INSERT INTO bot.message_types(message_type_code, message_type_code) VALUES('Invoice');
--INSERT INTO bot.message_types(message_type_code, message_type_code) VALUES('SuccessfulPayment');
--INSERT INTO bot.message_types(message_type_code, message_type_code) VALUES('WebsiteConnected');
--INSERT INTO bot.message_types(message_type_code, message_type_code) VALUES('ChatMembersAdded');
--INSERT INTO bot.message_types(message_type_code, message_type_code) VALUES('ChatMemberLeft');
--INSERT INTO bot.message_types(message_type_code, message_type_code) VALUES('ChatTitleChanged');
--INSERT INTO bot.message_types(message_type_code, message_type_code) VALUES('ChatPhotoChanged');
--INSERT INTO bot.message_types(message_type_code, message_type_code) VALUES('MessagePinned');
--INSERT INTO bot.message_types(message_type_code, message_type_code) VALUES('ChatPhotoDeleted');
--INSERT INTO bot.message_types(message_type_code, message_type_code) VALUES('GroupCreated');
--INSERT INTO bot.message_types(message_type_code, message_type_code) VALUES('SupergroupCreated');
--INSERT INTO bot.message_types(message_type_code, message_type_code) VALUES('ChannelCreated');
--INSERT INTO bot.message_types(message_type_code, message_type_code) VALUES('MigratedToSupergroup');
--INSERT INTO bot.message_types(message_type_code, message_type_code) VALUES('MigratedFromGroup');
--INSERT INTO bot.message_types(message_type_code, message_type_code) VALUES('Animation');

CREATE TABLE bot.messengers (
    messenger_code varchar(2) NOT NULL PRIMARY KEY,
    messenger_name varchar(20) NOT NULL,
    update_date     timestamptz NOT NULL DEFAULT now(),
    insert_date     timestamptz NOT NULL DEFAULT now()
);
CREATE TRIGGER messengers_reset_update_date BEFORE UPDATE
ON bot.messengers FOR EACH ROW EXECUTE PROCEDURE helper.reset_update_date();

INSERT INTO bot.messengers(messenger_code, messenger_name) VALUES('TG', 'Telegram');
INSERT INTO bot.messengers(messenger_code, messenger_name) VALUES('VK', 'Вконтакте');
INSERT INTO bot.messengers(messenger_code, messenger_name) VALUES('SK', 'Skype');
INSERT INTO bot.messengers(messenger_code, messenger_name) VALUES('FB', 'Facebook');
INSERT INTO bot.messengers(messenger_code, messenger_name) VALUES('DC', 'Discord');



CREATE TABLE bot.received_messages (
    received_message_id   bigserial     NOT NULL PRIMARY KEY,
    messenger_code        varchar(2)    NOT NULL REFERENCES bot.messengers(messenger_code),
    message_type_code     varchar(3)    NOT NULL REFERENCES bot.message_types(message_type_code),
    user_id               int           NOT NULL REFERENCES bot.users(user_id),
    chat_id               int           NOT NULL REFERENCES bot.chats(chat_id),
    received_message_text varchar(100)      NULL, -- Полный текст доступен в raw_data
    raw_data              json          NOT NULL,
    update_date           timestamptz   NOT NULL DEFAULT now(),
    insert_date           timestamptz   NOT NULL DEFAULT now()

    --"ReceivedMsgId"                     bigserial     PRIMARY KEY,
    --"ReceivedMsgMessageId"              int           NOT NULL,
    --"UserId"                            int           NOT NULL REFERENCES bot."User" ("UserId"),
    --"ChatId"                            bigint        NOT NULL REFERENCES bot."Chat" ("ChatId"),
    --"MessageTypeName"                   varchar(50)   NOT NULL REFERENCES bot."MessageType" ("MessageTypeName"),
    --"ReceivedMsgAuthorSignature"        varchar(500)      NULL,
    --"ReceivedMsgCaption"                varchar(500)      NULL,
    --"ReceivedMsgChannelChatCreated"     bool              NULL,
    --"ReceivedMsgConnectedWebsite"       varchar(500)      NULL,
    --"ReceivedMsgDate"                   timestamptz       NULL,
    --"ReceivedMsgDeleteChatPhoto"        bool              NULL,
    --"ReceivedMsgEditDate"               timestamptz       NULL,
    --"ReceivedMsgForwardDate"            timestamptz       NULL,
    --"ReceivedMsgForwardFromId"          int               NULL,
    --"ReceivedMsgForwardFromChatId"      bigint            NULL,
    --"ReceivedMsgForwardFromMessageId"   int               NULL,
    --"ReceivedMsgForwardSignature"       varchar(500)      NULL,
    --"ReceivedMsgGroupChatCreated"       bool              NULL,
    ----"ReceivedMsgIsForwarded"            bool              NULL,
    --"ReceivedMsgLeftChatMemberId"       int               NULL,
    --"ReceivedMsgLocation"               varchar(500)      NULL,
    --"ReceivedMsgMediaGroupId"           varchar(500)      NULL,
    --"ReceivedMsgMigrateFromChatId"      bigint            NULL,
    --"ReceivedMsgMigrateToChatId"        bigint            NULL,
    --"ReceivedMsgNewChatTitle"           varchar(500)      NULL,
    --"ReceivedMsgPinnedMessageId"        int               NULL,
    --"ReceivedMsgReplyToMessageId"       int               NULL,
    --"ReceivedMsgSupergroupChatCreated"  bool              NULL,
    --"ReceivedMsgText"                   varchar(5000)     NULL,
    --"IsDeleted"                         bool          NOT NULL DEFAULT(false),
    --"InsertDate"                        timestamptz   NOT NULL DEFAULT now(),   
    --"UpdateDate"                        timestamptz   NOT NULL DEFAULT now()
);
CREATE TRIGGER received_messages_reset_update_date BEFORE UPDATE
ON bot.received_messages FOR EACH ROW EXECUTE PROCEDURE helper.reset_update_date();



CREATE TABLE bot.sent_messages (
    sent_message_id       bigserial     NOT NULL PRIMARY KEY,
    messenger_code        varchar(2)    NOT NULL REFERENCES bot.messengers(messenger_code),
    message_type_code     varchar(3)    NOT NULL REFERENCES bot.message_types(message_type_code),
    user_id               int           NOT NULL REFERENCES bot.users(user_id),
    chat_id               int           NOT NULL REFERENCES bot.chats(chat_id),
    sent_message_text     varchar(100)      NULL, -- Полный текст доступен в raw_data
    raw_data              json          NOT NULL,
    is_sent_successfully  bool          NOT NULL, 
    update_date           timestamptz   NOT NULL DEFAULT now(),
    insert_date           timestamptz   NOT NULL DEFAULT now()
    
    --"SentMsgId"                     serial     PRIMARY KEY,
    --"ChatId"                        bigint        NOT NULL REFERENCES bot."Chat" ("ChatId"),
    --"SentMsgMessageId"              int               NULL,
    --"SentMsgText"                   varchar(5000)     NULL,
    --"MessageTypeName"               varchar(50)   NOT NULL REFERENCES bot."MessageType" ("MessageTypeName"),     
    --"SentMsgParseMode"              varchar(100)      NULL,
    --"SentMsgDisableWebPagePreview"  bool              NULL,
    --"SentMsgDisableNotification"    bool              NULL,
    --"SentMsgReplyToMessageId"       int               NULL,
    --"SentMsgCaption"                varchar(500)      NULL,
    --"SentMsgDuration"               int               NULL,
    --"SentMsgPerformer"              varchar(500)      NULL,
    --"SentMsgTitle"                  varchar(500)      NULL,
    --"SentMsgWidth"                  int               NULL,
    --"SentMsgHeight"                 int               NULL,
    --"SentMsgSupportsStreaming"      bool              NULL,
    --"SentMsgLength"                 int               NULL,
    --"SentMsgLatitude"               float             NULL,
    --"SentMsgLongitude"              float             NULL,
    --"SentMsgLivePeriod"             int               NULL,
    --"SentMsgAddress"                varchar(100)      NULL,
    --"SentMsgFoursquareId"           varchar(100)      NULL,
    --"SentMsgFoursquareType"         varchar(100)      NULL,
    --"SentMsgPhoneNumber"            varchar(100)      NULL,
    --"SentMsgFirstName"              varchar(100)      NULL,
    --"SentMsgLastName"               varchar(100)      NULL,
    --"SentMsgVCard"                  varchar(500)      NULL,
    --
    --"SentMsgTag"                    varchar(5000)     NULL,
    --"SentMsgKeyboardType"           varchar(20)       NULL,
    --"SentMsgFailedSendings"         int               NULL,
    --"SentMsgFailDescription"        varchar(5000)     NULL,
    --"SentMsgReplyToMessageId"       int               NULL,
    --"IsSentSuccessfully"            bool              NULL, 
    --"IsDeleted"                     bool          NOT NULL DEFAULT(false),
    --"InsertDate"                    timestamptz   NOT NULL DEFAULT now(),   
    --"UpdateDate"                    timestamptz   NOT NULL DEFAULT now()
);
CREATE TRIGGER sent_messages_reset_update_date BEFORE UPDATE
ON bot.sent_messages FOR EACH ROW EXECUTE PROCEDURE helper.reset_update_date();



CREATE TABLE bot.logs (
    log_id       bigserial     NOT NULL PRIMARY KEY,
    log_type     varchar(7)    NOT NULL,                -- Info, warning, error
    log_group    varchar(50)       NULL,                -- Джоб, обработка сообщения, инициализация и т.д.
    log_message  varchar(200)  NOT NULL,                -- Краткое описание
    log_data     json              NULL,
    log_method   varchar(100)      NULL,                -- перенести в log_data
    message_id   int               NULL,                -- перенести в log_data
    insert_date  timestamptz   NOT NULL DEFAULT now()
);



CREATE TABLE bot.commands (
    command_name         varchar(50)   PRIMARY KEY, -- Так много символов для программных запросов
    command_script       varchar(5000) NOT NULL, -- SQL-скрипт с параметрами    
    command_default_args varchar(100)      NULL, -- Дефолтные аргументы, которые будут вызванны при вызове команды без аргументов. Записываются через точку с запятой
    command_desc         varchar(100)      NULL,
    command_group        varchar(50)   NOT NULL, -- Вместо "RoleList" для связи с ролями
    update_date          timestamptz   NOT NULL DEFAULT now(),
    insert_date          timestamptz   NOT NULL DEFAULT now()
    --"RoleList"           varchar(100)  NOT NULL
);
CREATE TRIGGER commands_reset_update_date BEFORE UPDATE
ON bot.commands FOR EACH ROW EXECUTE PROCEDURE helper.reset_update_date();

-- Проверка и правка command_name
CREATE OR REPLACE FUNCTION bot.commands_new_command_correct()
RETURNS TRIGGER AS $$
BEGIN

    NEW.command_name = lower(trim(NEW.command_name));
    NEW.command_name = replace(NEW.command_name, '/', '' );
    NEW.command_name = '/' || NEW.command_name;
	
	NEW.command_group = lower(trim(NEW.command_group));
	NEW.command_group = replace(NEW.command_group, 'cmdgroup', '' );
    NEW.command_group = NEW.command_group || 'CmdGroup';
    
    --raise notice 'Value: %', NEW.command_name;
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER commands_new_command_correct BEFORE INSERT
ON bot.commands FOR EACH ROW EXECUTE PROCEDURE bot.commands_new_command_correct();

INSERT INTO bot.commands(command_name, command_script, command_default_args, command_desc, command_group) 
VALUES('/GetUserStatistics', 'SELECT bot."sfCmdGetStatistics"({0}, {1}, {2})', '15; now()::Date; now()', 'Получение статистики по активности участников чата за определённый период', 'user');
INSERT INTO bot.commands(command_name, command_script, command_default_args, command_desc, command_group) 
VALUES('/Test', 'SELECT ''Test''', null, 'Тестовый запрос к боту', 'moderator');
INSERT INTO bot.commands(command_name, command_script, command_default_args, command_desc, command_group) 
VALUES('/Help', 'SELECT bot."sfCmdGetHelp"({0})', '''User''', 'Получение справки по функциям, доступным для данной роли', 'User; user');
INSERT INTO bot.commands(command_name, command_script, command_default_args, command_desc, command_group) 
VALUES('/SetMessageLimit', 'SELECT bot."sfCmdSetMessageLimit"({0}, {1})', '0; 0', 'Установка лимита сообщений для пользователей', 'moderator');





--CREATE TABLE bot.sessions (
--    session_id           serial      PRIMARY KEY,
--  chat_id              int         NOT NULL REFERENCES bot.chats(chat_id),
--    session_is_logged_in bool        NOT NULL,
--    session_current_step varchar(50)     NULL,    
--    update_date          timestamptz NOT NULL DEFAULT now(),
--    insert_date          timestamptz NOT NULL DEFAULT now()
--);
--CREATE TRIGGER sessions_reset_update_date BEFORE UPDATE
--ON bot.sessions FOR EACH ROW EXECUTE PROCEDURE helper.reset_update_date();




--CREATE TABLE bot.jobs (
--    job_id            serial       PRIMARY KEY,
--    job_name          varchar(100) NOT NULL,
--    job_description   varchar(100)     NULL,   
--    job_is_active     bool         NOT NULL DEFAULT FALSE,
--    job_method_name   varchar(100) NOT NULL,
--    job_month         int              NULL, -- месяц, если событие ежегодное; null, если событие ежемесячное
--    job_day           int          NOT NULL, -- день месяца
--    job_hour          int          NOT NULL, -- время оповещения
--    job_minute        int          NOT NULL, -- время оповещения
--    job_last_execDate timestamptz      NULL,
--    update_date       timestamptz  NOT NULL DEFAULT now(),
--    insert_date       timestamptz  NOT NULL DEFAULT now()
--);
--CREATE TRIGGER jobs_reset_update_date BEFORE UPDATE
--ON bot.jobs FOR EACH ROW EXECUTE PROCEDURE helper.reset_update_date();



