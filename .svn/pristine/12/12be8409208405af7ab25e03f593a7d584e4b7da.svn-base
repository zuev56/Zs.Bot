using System;
using Microsoft.EntityFrameworkCore;
using Zs.Bot.Helpers;
using Zs.Bot.Model.Db;
using Zs.Bot.Modules.Command;
using Zs.Bot.Modules.Messaging;
using Zs.Common.Interfaces;
using Zs.Common.Modules;

namespace Zs.Bot
{
    public class ZsBot : ModuleBase
    {
        private readonly IZsConfiguration _configuration;

        private readonly Logger _logger = Logger.GetInstance();

        public CommandManager CommandManager { get; set; }
        public Modules.Messaging.IMessenger Messenger { get; set; }


        public ZsBot(
            IZsConfiguration configuration,
            Modules.Messaging.IMessenger messenger)
        {
            try
            {
                _configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));

                var optionsBuilder = new DbContextOptionsBuilder<RobotDbContext>();
                optionsBuilder.UseNpgsql(_configuration.ConnectionString);
                RobotDbContext.Initialize(optionsBuilder.Options);

                Messenger = messenger ?? throw new ArgumentNullException(nameof(messenger));
                Messenger.MessageReceived += Messenger_MessageReceived;
                Messenger.MessageSent += Messenger_MessageSent;
                Messenger.MessageDeleted += Messenger_MessageDeleted;

                CommandManager = new CommandManager();
                CommandManager.CommandCompleted += CommandManager_CommandCompleted;
            }
            catch (Exception e)
            {
                throw new TypeInitializationException(nameof(ZsBot), e);
            }
        }

        private void CommandManager_CommandCompleted(CommandResult result)
        {
            var chat = DbChat.GetChat(result.ChatIdForAnswer);
            Messenger.AddMessageToOutbox(chat, result.Text);
        }

        private void Messenger_MessageReceived(MessageReceivedEventArgs args)
        {
            var message = args.Message;

            SaveUser(args.User);
            SaveChat(args.Chat);
            message.UserId = args.User.UserId;
            message.ChatId = args.Chat.ChatId;
            SaveReceivedMessage(message);

            // 1. Проверка авторизации
            //if (!Authorization(tgMessage) && session.SessionCurrentStep != IsWaitingForPassword)
            //    return;


            // 2. Обрабатываем в зависимости от того, команда это или данные                           
            if (BotCommand.IsCommand(message.ReceivedMessageText))
            {
                var botCommand = BotCommand.ParseMessage(message);

                if (botCommand != null)
                    CommandManager.EnqueueCommand(botCommand);
                else
                    Messenger.AddMessageToOutbox(args.Chat, $"Unknown command '{message.ReceivedMessageText}'");
            }
            else
            {
            
            }
        }

        private void Messenger_MessageSent(MessageSentEventArgs args)
        {
            SaveChat(args.Chat); 
            args.Message.ChatId = args.Chat.ChatId;
            SaveSentMessage(args.Message);
        }

        private void Messenger_MessageDeleted(MessageDeletedEventArgs args)
        {
            SaveReceivedMessage(args.Message);
        }


        /// <summary> Запуск бота </summary>
        public override void Start(int delay)
        {
            //try
            //{
            //    Thread.Sleep(delay);
            //
            //    // Инициализация контекста данных
            //    _zsBotOptionsBuilder.UseNpgsql(_configuration.ConnectionString);
            //    RobotDbContext.Initialize(_zsBotOptionsBuilder.Options);
            //
            //    CommandManager.Start(500);
            //    //Messenger.Start(500);
            //}
            //catch (Exception e)
            //{
            //    _logger.LogError(e);
            //}
        }

        /// <summary> Остановка бота </summary>
        public override void Stop(int delay = 0)
        {
            try
            {
                _logger.LogInfo("Запрос на остановку службы", "Остановка службы");
                
                //CommandManager.Stop();
                //Messenger.Stop();
            }
            catch (Exception e)
            {
                _logger.LogError(e);
            }
            finally
            {
                _logger.LogInfo("Служба успешно завершена", "Остановка службы");
            }
        }


        /// <summary> Получение списка пользователей заданных ролей </summary>
        //public static List<int> GetUsersIdByRole(params UserRole[] userRoles)
        //{
        //    var users = new List<DbUser>();
        //
        //    if (userRoles != null && userRoles.Length != 0)
        //    {
        //        using var ctx = new RobotDbContext();
        //
        //        throw new NotImplementedException("Раскомментировать текст ниже после восстановления модели данных");
        //        //var necessaryUsers = ctx.Users
        //        //    .Where(u => userRoles.Cast<string>().Contains(u.UserRoleCode));
        //        //
        //        //foreach (var user in necessaryUsers)
        //        //    users.Add(user);
        //    }
        //    return users.Select(u => u.UserId).ToList();
        //}


        private void SaveUser(IUser user)
        {
            try
            {
                DbUser.SaveToDb(user);
                user.UserId = DbUser.GetId(user);
            }
            catch (Exception e)
            {
                _logger.LogError(e);
            }
        }

        private void SaveChat(IChat chat)
        {
            try
            {
                DbChat.SaveToDb(chat);
                chat.ChatId = DbChat.GetId(chat);
            }
            catch (Exception e)
            {
                _logger.LogError(e);
            }
        }

        private static void SaveReceivedMessage(IReceivedMessage message)
        {
            DbReceivedMessage.SaveToDb(message);
        }

        private static void SaveSentMessage(ISentMessage message)
        {
            DbSentMessage.SaveToDb(message);
        }



    }
}
