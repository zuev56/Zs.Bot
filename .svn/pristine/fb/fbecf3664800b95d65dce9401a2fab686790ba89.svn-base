//using System;
//using Zs.ChatAdminService.Enums;

//namespace ChatAdminService
//{
//    internal class MessageAnalyser
//    {
//        private int _messageLimitHi = -1;                          // Верхняя предупредительная уставка
//        private int _messageLimitHiHi = -1;                        // Верхняя аварийная уставка
//        private int _messageLimitAfterBan = 5;                     // Количество сообщений, доступное пользователю после бана до конца дня
//        private long _msgsBeforeRestriction = -1;                  // Общее количество сообщений в чате, после которого включается ограничитель
//        private bool _doNotBanAdmins = true;                       // Банить или не банить админов
//        private bool _limitsAreDefined = false;             // Нужен для понимания, были ли уже переопределены лимиты после восстановления интернета
//        private BanPeriod _banPeriod = BanPeriod.UntilNextDay;
//        private DateTime _accountingStartDate = DateTime.MinValue; // Время начала учёта сообщений и включения ограничений




//        /// <summary> Проверяем, начался ли уже учёт и надо ли его начать </summary>
//        private bool AccountingHasBegan(DateTime messageDateMsk)
//        {
//            using (var ctx = new ZsBotEntities())
//            {
//                // 1. Если порог общего кол-ва сообщений задан, ограничение будет включено при достижении этого порога
//                if (_msgsBeforeRestriction > 0)
//                {
//                    // Подсчёт всех сообщений в этой группе за день
//                    int chatMsgCount = ctx.ReceivedMessages
//                        .Count(m => m.ChatId == _defaultChatId
//                                 && m.ReceivedMsgDate > DateTime.Today - TimeSpan.FromHours(3));

//                    // Если ещё не активирован режим ограничения - активируем
//                    // это условие будто не всегда выполняется
//                    if (chatMsgCount == _msgsBeforeRestriction
//                        || (chatMsgCount > _msgsBeforeRestriction && _accountingStartDate == DateTime.MinValue)) // Когда каким-то образом пропустили момент с равенством
//                    {
//                        // Посылаем предупреждение в чат
//                        var chat = ctx.Chats.FirstOrDefault(c => c.ChatId == _defaultChatId);
//                        _bot.Messenger.AddMessageToOutbox(chat.GetTelegramType().Result, $"В чате уже {chatMsgCount} сообщений. Начинаю персональный учёт.");
//                        _accountingStartDate = messageDateMsk + TimeSpan.FromSeconds(1);

//                        // Запись в БД
//                        using (var casCtx = new ChatAdminEntities())
//                        {
//                            casCtx.Accountings.Add(new Accounting() { StartDate = _accountingStartDate, UpdateDate = DateTime.Now });
//                            casCtx.SaveChanges();
//                        }
//                    }

//                    // Преодолён порог общего количества сообщений?
//                    if (chatMsgCount > _msgsBeforeRestriction)
//                        return true;
//                    else
//                        return false;
//                }
//                // 2. Если порог общего кол-ва сообщений НЕ был задан, ограничение будет работать постоянно
//                else
//                {
//                    _accountingStartDate = DateTime.Now.Date; // С начала дня

//                    // Запись в БД
//                    using (var casCtx = new ChatAdminEntities())
//                    {
//                        casCtx.Accountings.Add(new Accounting() { StartDate = _accountingStartDate, UpdateDate = DateTime.Now });
//                        casCtx.SaveChanges();
//                    }

//                    return true;
//                }
//            }
//        }

//        /// <summary> Получение лимитов из БД </summary>
//        private void LoadLimitsFromDb()
//        {
//            string logData = $"_messageLimitHiHi        = {_messageLimitHiHi}"
//                           + $"\n_messageLimitHi        = {_messageLimitHi}"
//                           + $"\n_doNotBanAdmins        = {_doNotBanAdmins}"
//                           + $"\n_msgsBeforeRestriction = {_msgsBeforeRestriction}"
//                           + $"\n_accountingStartDate   = {_accountingStartDate}"
//                           + $"\n_banPeriod             = {_banPeriod}";

//            _logger.SaveToDb(LogType.Info, "Установка лимитов", "Начало определения лимитов", logData);


//            using (var ctx = new ZsBotEntities())
//            using (var casCtx = new ChatAdminEntities())
//            {
//                _messageLimitHiHi = int.Parse(casCtx.Parameters.FirstOrDefault(p => p.Name == "ChatUserMessageCountHiHi").Value);
//                _messageLimitHi = int.Parse(casCtx.Parameters.FirstOrDefault(p => p.Name == "ChatUserMessageCountHi").Value);
//                _doNotBanAdmins = bool.Parse(casCtx.Parameters.FirstOrDefault(p => p.Name == "DoNotBanAdmins").Value);
//                _msgsBeforeRestriction = int.Parse(casCtx.Parameters.FirstOrDefault(p => p.Name == "ActivateLimiterAfterMsgCount").Value ?? "-1");
//                _accountingStartDate = casCtx.Accountings.FirstOrDefault(a => a.StartDate.Date == DateTime.Now.Date)?.StartDate ?? DateTime.MinValue;

//                // Находим максимальное количество УЧТЁННЫХ сообщений за сутки от одного пользователя
//                var mostActiveUsersAccounted = GetTopTenForAccounting_OneChat(_defaultChatId, ctx);

//                // Если админов нельзя банить, то не учитываем их сообщения
//                if (_doNotBanAdmins)
//                {
//                    var adminIds = _bot.GetUsersByRole(UserRole.Owner, UserRole.Administrator).Select(u => u.UserId);
//                    foreach (var i in adminIds)
//                        if (mostActiveUsersAccounted.ContainsKey(i))
//                            mostActiveUsersAccounted.Remove(i);
//                }

//                int userMaxMsgCountAccounted = mostActiveUsersAccounted.Count() > 0
//                                    ? mostActiveUsersAccounted.Max(i => i.Value)
//                                    : 0;

//                // Если максимальное количество уже имеющихся сообщений больше уставок из базы - корректируем уставки
//                if (_messageLimitHi < userMaxMsgCountAccounted || _messageLimitHiHi < userMaxMsgCountAccounted)
//                {
//                    _messageLimitHi = _messageLimitHi > 0 ? userMaxMsgCountAccounted + 1 : 0;    // Только если ограничение было задано
//                    _messageLimitHiHi = _messageLimitHi > 0 ? _messageLimitHi + 5 : 0;    // Только если ограничение было задано
//                }

//                _banPeriod = (BanPeriod)Enum.Parse(typeof(BanPeriod), casCtx.Parameters.FirstOrDefault(p => p.Name == "BanPeriod").Value);

//                // Test begin
//                //var t1 = ctx.ReceivedMessages.Where(m => m.ChatId == _defaultChatId
//                //                                      && m.IsDeleted == false);
//                //var t11 = DateTime.Today - TimeSpan.FromHours(3);
//                //var t2 = ctx.ReceivedMessages.Where(m => m.ReceivedMsgDate >= t11);
//                //var t3 = t2.Count();
//                //var t4 = ctx.ReceivedMessages.Where(m => m.ReceivedMsgDate >= t11)
//                //                                      && m.ChatId == _defaultChatId
//                //                                      && m.IsDeleted == false);
//                //var t5 = t4.Count();
//                // Test end


//                var dayBeginDateTime = DateTime.Today - TimeSpan.FromHours(3); // Без этого ругается :(
//                int dailyMsgCount = ctx.ReceivedMessages
//                                .Where(m => m.ReceivedMsgDate >= dayBeginDateTime
//                                         && m.ChatId == _defaultChatId
//                                         && m.IsDeleted == false).Count();
//                _msgsBeforeRestriction = dailyMsgCount > _msgsBeforeRestriction
//                                       ? dailyMsgCount + 2
//                                       : _msgsBeforeRestriction;

//                logData = $"userMaxMsgCount          = {userMaxMsgCountAccounted}"
//                        + $"\n_messageLimitHiHi      = {_messageLimitHiHi}"
//                        + $"\n_messageLimitHi        = {_messageLimitHi}"
//                        + $"\n_doNotBanAdmins        = {_doNotBanAdmins}"
//                        + $"\n_msgsBeforeRestriction = {_msgsBeforeRestriction}"
//                        + $"\n_accountingStartDate   = {_accountingStartDate}"
//                        + $"\n_banPeriod             = {_banPeriod}";
//            }

//            // Оповещение владельцев и администраторов о переопределении лимитов
//            using (var ctxRm = new ZsBotEntities())
//            {
//                foreach (var admin in _bot.GetUsersByRole(UserRole.Owner, UserRole.Administrator))
//                {
//                    var chat = ctxRm.Chats.FirstOrDefault(c => c.ChatId == admin.UserId)
//                             ?.GetTelegramType()
//                             ?.Result;

//                    if (chat != null)
//                        SendBotConfiguration(chat);
//                    //else
//                    //    _remoteManager.SaveException(new Exception($"Для администратора с ID = {admin.UserId} нет соответствующего чата в БД!"));
//                }
//            }

//            _logger.SaveToDb(LogType.Info, "Установка лимитов", "Конец определения лимитов", logData);
//        }

//        /// <summary> Отправка данных о конфигурации чата </summary>
//        private void SendBotConfiguration(Telegram.Bot.Types.Chat chat)
//        {
//            // TODO: Автоматический анализ флада

//            string banPeriod = "";
//            switch (_banPeriod)
//            {
//                case BanPeriod.ForOneHour: banPeriod = "в течение 1-го часа"; break;
//                case BanPeriod.ForThreeHours: banPeriod = "в течение 3-х часов"; break;
//                case BanPeriod.UntilNextDay: banPeriod = "до начала следующего дня"; break;
//                case BanPeriod.Undefined: throw new NotImplementedException("Период бана не может быть неопределённым!");
//            }

//            string msg = "";
//            if (_messageLimitHi <= 0)
//                msg = "Ограничение количества сообщений *не установлено*";
//            //+ "\n\nРежим ограничения количества сообщений отключен";
//            else if (_messageLimitHi > 0 && _messageLimitHiHi <= 0)
//                msg = $"Пользователи будут получать только предупреждение после *{_messageLimitHi}-го* сообщения"
//                    + "\n\nРежим ограничения количества сообщений отключен";
//            else if (_messageLimitHi > 0 && _messageLimitHiHi > 0)
//            {
//                msg = $"Пользователи будут получать предупреждение после *{_messageLimitHi}-го* сообщения.\n"
//                    + $"Все сообщения после *{_messageLimitHiHi}-го* будут удаляться {banPeriod}."
//                    + (_msgsBeforeRestriction > 0
//                      ? $"\n\nУчёт начнётся после *{_msgsBeforeRestriction}-го* сообщения в чате за день"
//                      : "\n\nУчёт сообщений ведётся с начала дня");
//            }
//            else
//                throw new NotImplementedException("SendBotStatus: такого исхода не ожидалось");

//            if ((_banPeriod == BanPeriod.ForOneHour || _banPeriod == BanPeriod.ForThreeHours)
//                && (_messageLimitHi > 0 && _messageLimitHiHi > 0))
//                msg += $"\n\nПо окончании периода бана пользователю будет выделено *{_messageLimitAfterBan} сообщений* до конца дня";

//            // Отправляем сообщение
//            _bot.Messenger.AddMessageToOutbox(chat, msg);
//        }

//        ///// <summary> Обработка сообщений из группы </summary>
//        //private void Bot_GroupChatMessageHandler(InMessage tgMessage)
//        //{
//        //    string logData = $"MessageId        = {tgMessage.MessageId}"
//        //                   + $"\nMessageText    = {tgMessage.Text ?? ""}"
//        //                   + $"\nChatId         = {tgMessage.Chat.Id}"
//        //                   + $"\nMessageDateMsk = {tgMessage.Date + TimeSpan.FromHours(3)}"
//        //                   + $"\nAccountingFrom = {_accountingStartDate}"
//        //                   + $"\nUserId         = {tgMessage.From.Id}";

//        //    _logger.SaveToDb(LogType.Info, "Групповое сообщение", "Начало обработки сообщения", logData, tgMessage.MessageId);

//        //    #region Условия прекращения анализа сообщения

//        //    // Если не дефолтный чат - выходим
//        //    if (tgMessage.Chat.Id != _defaultChatId)
//        //    {
//        //        _logger.SaveToDb(LogType.Info, "Групповое сообщение", "Прекращение обработки сообщения: сообщение не из чата по умолчанию", logData, tgMessage.MessageId);
//        //        return;
//        //    }

//        //    // Если не задана предупредительная уставка, то нет смысла дёргать БД
//        //    if (_messageLimitHi <= 0)
//        //    {
//        //        _logger.SaveToDb(LogType.Info, "Групповое сообщение", "Прекращение обработки сообщения: не задан даже предупредительный лимит, нет смысла идти дальше", logData, tgMessage.MessageId);
//        //        return;
//        //    }

//        //    // Если интернет появился менее минуты назад, то не обрабатываем сообщения
//        //    if ((DateTime.Now - _connector.InternetRepairDate.Value).Minutes <= 1)
//        //    {
//        //        _logger.SaveToDb(LogType.Info, "Групповое сообщение", "Прекращение обработки сообщения: интернет появился менее минуты назад", logData, tgMessage.MessageId);
//        //        return;
//        //    }

//        //    // Проверяем, начался ли уже учёт
//        //    if (!AccountingHasBegan(tgMessage.Date + TimeSpan.FromHours(3)))
//        //    {
//        //        _logger.SaveToDb(LogType.Info, "Групповое сообщение", "Прекращение обработки сообщения: учёт сообщений ещё не начался, нет смысла идти дальше", logData, tgMessage.MessageId);
//        //        return;
//        //    }
//        //    #endregion

//        //    // Временно. Для исключения такого условия
//        //    if (_accountingStartDate < DateTime.Now.Date - TimeSpan.FromDays(1))
//        //        throw new Exception($"_accountingStartDate = {_accountingStartDate}");

//        //    try
//        //    {
//        //        // Проверка наличия пользователя в списке предупреждённых/забаненных сегодня
//        //        Ban ban = GetActiveBanForUser(tgMessage);

//        //        using (var ctx = new ZsBotEntities())
//        //        {
//        //            bool SendAsAnswer = false; // Определяет, писать пользователю по UserName или как ответ на сообщение

//        //            // Определяем пользователя
//        //            var user = ctx.Users.FirstOrDefault(u => u.UserId == tgMessage.From.Id);

//        //            // Одменов не трогаем! (настраивается в БД)
//        //            if (_doNotBanAdmins && (UserRole)Enum.Parse(typeof(UserRole), user.RoleName) >= UserRole.Administrator)
//        //            {
//        //                _logger.SaveToDb(LogType.Info, "Групповое сообщение", "Прекращение обработки сообщения: сообщение от одмена, а их не трогаем", logData, tgMessage.MessageId);
//        //                return;
//        //            }

//        //            // Определение имени, по  которому будем обращаться к участнику чата
//        //            string userName = $"@{user.UserName}";
//        //            if (user.UserName == null)
//        //            {
//        //                userName = (user.UserFirstName ?? "") + " " + (user.UserLastName ?? "").Trim();
//        //                SendAsAnswer = true;
//        //            }
//        //            logData += $"\nUserName       = {userName}";

//        //            // 0. Подсчёт сообщений пользователя в этой группе с даты начала учёта
//        //            var shiftedAccountingDate = _accountingStartDate - TimeSpan.FromHours(3);
//        //            int userMsgCount = ctx.ReceivedMessages
//        //                .Count(m => m.ChatId == _defaultChatId
//        //                         && m.UserId == tgMessage.From.Id
//        //                         && m.ReceivedMsgDate >= shiftedAccountingDate
//        //                         && m.IsDeleted == false); // Считаем только неудалённые

//        //            logData += $"\nUserMsgCount   = {userMsgCount}";

//        //            _logger.SaveToDb(LogType.Info, "Групповое сообщение", "Начинаются проверки", logData, tgMessage.MessageId);


//        //            // 1. Если достигнут предупредительный лимит
//        //            //    и СЕГОДНЯ предупреждений не было
//        //            if (userMsgCount >= _messageLimitHi && ban == null)
//        //            {
//        //                using (var casCtx = new ChatAdminEntities())
//        //                {
//        //                    bool IsWarned = ban?.IsWarned ?? false;

//        //                    // Если ранее не предупреждали
//        //                    if (!IsWarned)
//        //                    {
//        //                        // Добавляем запись о предупреждении (заготовку для бана)
//        //                        casCtx.Bans.Add(new Ban()
//        //                        {
//        //                            UserId = tgMessage.From.Id,
//        //                            ChatId = tgMessage.Chat.Id,
//        //                            IsWarned = true,
//        //                            IsActive = true,
//        //                            InsertDate = DateTime.Now,
//        //                            UpdateDate = DateTime.Now
//        //                        });
//        //                        casCtx.SaveChanges();

//        //                        // Считываем её, чтобы взять ID
//        //                        ban = GetActiveBanForUser(tgMessage);

//        //                        // Делаем предупреждение (либо указанием пользователя, либо ответом на сообщение)
//        //                        _bot.Messenger.AddMessageToOutbox(
//        //                            tgMessage.Chat,
//        //                            $"{userName}, количеcтво сообщений, отправленных Вами с начала учёта: {userMsgCount}\n"
//        //                            + $"Лимит сообщений до конца дня: {_messageLimitHiHi} (у Вас осталось {_messageLimitHiHi - userMsgCount}).\nПри достижении лимита будут введены ограничения",
//        //                            tag: $"{ban?.BanId ?? -1}@{ban?.UserId ?? -1}", // Пометка, чтобы удалять предыдущие сообщения от бота для заданного пользователя
//        //                            replyToMessageId: (SendAsAnswer ? tgMessage.MessageId : -1));

//        //                        _logger.SaveToDb(LogType.Info, "Групповое сообщение", "Прекращение проверки: сделано предупреждение пользователю о том, что он приближается к лимиту", logData, tgMessage.MessageId);

//        //                        // После предупреждения выходим
//        //                        return;
//        //                    }
//        //                }
//        //            }

//        //            // 2. Если достигнут аварийный лимит или бот перезагрузился, переопределил лимиты, но пользователь был забанен ранее
//        //            if (userMsgCount >= _messageLimitHiHi || (ban != null && ban.BanFinishDate > DateTime.Now))
//        //            {
//        //                // Проверяем, был ли пользователь забанен ранее
//        //                // Если был и бан активен - удаляем сообщение
//        //                // Если был и бан закончился -> Если userMsgCount < (_messageLimitHiHi + _messageLimitAfterBan)
//        //                //                                   позволяем оставить сообщение
//        //                //                              Иначе удаляем сообщение

//        //                // 2.1 Если пользователь не был забанен ранее - баним
//        //                if (ban.BanFinishDate == null)
//        //                {
//        //                    // Сообщаем пользователю, что он ограничен до окончания периода
//        //                    string msg = "";
//        //                    if (_banPeriod == BanPeriod.ForOneHour || _banPeriod == BanPeriod.ForThreeHours)
//        //                        msg = $"{userName}, Вы превысили лимит сообщений до конца дня ({_messageLimitHiHi}). Все последующие сообщения {Ban.PeriodToString(_banPeriod, 1)} будут удаляться.\n"
//        //                            + $"Потом до конца дня у Вас будет {_messageLimitAfterBan} сообщений";
//        //                    else if (_banPeriod == BanPeriod.UntilNextDay)
//        //                        msg = $"{userName}, Вы превысили лимит сообщений до конца дня ({_messageLimitHiHi}). Все последующие сообщения до конца дня будут удаляться";
//        //                    else
//        //                        throw new NotImplementedException();

//        //                    _bot.Messenger.AddMessageToOutbox(tgMessage.Chat,
//        //                                                         msg,
//        //                                                         tag: $"{ban.BanId}@{ban.UserId}", // Пометка, чтобы удалять предыдущие сообщения от бота для заданного пользователя
//        //                                                         replyToMessageId: (SendAsAnswer ? tgMessage.MessageId : -1));

//        //                    // Удаляем из чата предыдущее предупреждение для пользователя от бота, чтоб не захламлять 
//        //                    DeleteLastWarningMessageForUser(ban);

//        //                    // Правим запись в таблице банов - задаём время окончания бана 
//        //                    using (var casCtx = new ChatAdminEntities())
//        //                    {
//        //                        var curBan = casCtx.Bans.First(b => b.BanId == ban.BanId)
//        //                                                .BanFinishDate = GetBanFinishTime();
//        //                        casCtx.SaveChanges();
//        //                    }

//        //                    _logger.SaveToDb(LogType.Info, "Групповое сообщение", "Пользователь получил первый бан за день", logData, tgMessage.MessageId);

//        //                }

//        //                // 2.2 Если бан закончился к этому моменту
//        //                if (ban.BanFinishDate < DateTime.Now)
//        //                {
//        //                    // Если израсходовано резервное количество сообщений (_messageLimitAfterBan)
//        //                    if (userMsgCount >= _messageLimitHiHi + _messageLimitAfterBan)
//        //                        using (var casCtx = new ChatAdminEntities())
//        //                        {
//        //                            // Делаем бан до конца дня
//        //                            casCtx.Bans.First(b => b.BanId == ban.BanId).BanFinishDate = DateTime.Today + TimeSpan.FromDays(1);
//        //                            casCtx.SaveChanges();

//        //                            _bot.Messenger.AddMessageToOutbox(tgMessage.Chat,
//        //                                                                 $"{userName}, на сегодня Вы полностью исчерпали свой лимит сообщений ({_messageLimitHiHi} + {_messageLimitAfterBan}).",
//        //                                                                 replyToMessageId: (SendAsAnswer ? tgMessage.MessageId : -1));

//        //                            // Удаляем предыдущее предупреждение для пользователя от бота
//        //                            DeleteLastWarningMessageForUser(ban);

//        //                            _logger.SaveToDb(LogType.Info, "Групповое сообщение", "Пользователь получил второй бан - до конца дня", logData, tgMessage.MessageId);
//        //                        }
//        //                }

//        //                // 2.3 Если пользователь забанен в данный момент
//        //                if (ban.BanFinishDate > DateTime.Now)
//        //                {
//        //                    // Доп. проверка 1
//        //                    if (tgMessage.Date + TimeSpan.FromHours(3) > _accountingStartDate)
//        //                    {
//        //                        // Доп. проверка 2 - если сообщение было отправлено не более чем минуту назад
//        //                        if ((DateTime.Now - tgMessage.Date + TimeSpan.FromHours(3)) > TimeSpan.FromMinutes(1))
//        //                        {
//        //                            // Удаляем сообщение из чата
//        //                            if (_bot.Messenger.DeleteMessage(tgMessage.Chat.Id, tgMessage.MessageId))
//        //                                _logger.SaveToDb(LogType.Info, "Групповое сообщение", "Сообщение забаненного пользователя удалено", logData, tgMessage.MessageId);
//        //                            else
//        //                                _logger.SaveToDb(LogType.Warning, "Групповое сообщение", "Не удалось удалить ообщение забаненного пользователя!", logData, tgMessage.MessageId);
//        //                        }
//        //                        else
//        //                            _logger.SaveToDb(LogType.Warning, "Групповое сообщение", "Сообщение забаненного пользователя НЕ удалено, т.к. оно существует больше минуты!", logData, tgMessage.MessageId);
//        //                    }
//        //                    else
//        //                    {
//        //                        logData += $"\ntgMessage.Date = {tgMessage.Date}";
//        //                        _logger.SaveToDb(LogType.Warning, "Групповое сообщение", "Сообщение забаненного пользователя НЕ удалено, т.к. его дата создания раньше даты начала учёта!", logData, tgMessage.MessageId);
//        //                    }
//        //                }
//        //            }
//        //        }

//        //        logData += $"\nMessageLimitHiHi = {_messageLimitHiHi}";
//        //        _logger.SaveToDb(LogType.Info, "Групповое сообщение", "Обработка завершена", logData, tgMessage.MessageId);
//        //    }
//        //    catch (Exception ex)
//        //    {
//        //        try
//        //        {
//        //            _logger.SaveException(ex);
//        //            //_logger.SaveToDb("ОШИБКА! Обработка сообщения из группы", ex, tgMessage.MessageId);
//        //        }
//        //        catch { }
//        //    }
//        //}

//        /// <summary> В зависимости от настроек бота рассчитывает время, когда пользователь будет разлочен </summary>
//        private DateTime GetBanFinishTime()
//        {
//            switch (_banPeriod)
//            {
//                case BanPeriod.ForOneHour: return DateTime.Now + TimeSpan.FromHours(1);
//                case BanPeriod.ForThreeHours: return DateTime.Now + TimeSpan.FromHours(3);
//                case BanPeriod.UntilNextDay: return DateTime.Now.Date + TimeSpan.FromDays(1);
//                default: return DateTime.Now; // Бан как бы заканчивается прямо щас
//            }
//        }
//    }
//}
