using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Zs.Bot;
using Zs.Bot.DbModel;
using Zs.Bot.Enums;
using Zs.Bot.Helpers;
using Zs.Bot.Modules.Agent;
using Zs.Bot.Modules.Connection;
using Zs.ChatAdminService.DbModel;

namespace Zs.ChatAdminService
{
    // Todo: Не учитывать стикеры
    // Todo: Разработать механизм оповещения пользователей по графику (добавить столбец с датой последнего оповещения)
    // Todo: Выводить время последних подключений к интернету
    // Todo: Разбить Хелп на группы и выводить только заголовки групп
    // Todo: ПРОВЕРКА СВЯЗИ С БД ПРИ ЗАПУСКЕ БОТА



    internal class ChatAdmin : IHostedService, IDisposable
    {
        private static DbContextOptionsBuilder<ZsBotContext> _zsBotOptionsBuilder = new DbContextOptionsBuilder<ZsBotContext>();
        private static DbContextOptionsBuilder<ChatAdminContext> _caOptionsBuilder = new DbContextOptionsBuilder<ChatAdminContext>();

        // TODO: Заменить на интерфейс
        private readonly Logger _logger;

        private long _defaultChatId = -1;                          // Ботможет быть во многих чатах, но работать должен только с одним
        private readonly DateTime _botStartDate = DateTime.Now;      // Время запуска бота
        private DateTime _newDay = DateTime.Today;    // Для определения, начался ли уже новый день
        private bool _chatStatisticsWasSent = false;             // Показывает, была ли сегодня отправлена дневная статистика чата

        /// <summary> Бот </summary>
        private ZsBot _bot;

        /// <summary> Выход в интернет </summary>
        private WebConnector _connector = new WebConnector();

        private Agent _agent = new Agent();


        #region ServiceBase

        public ChatAdmin(ILogger<ChatAdmin> logger)
        {
            // TODO: Разобраться, где вызывается конструктор и что передаётся ему в качестве параметра
            _logger = Logger.GetInstance();

            // Загрузка базовой конфигурации из файла
            Configuration.Initialize("AppSettings.json");

            // Контексты данных
            _zsBotOptionsBuilder.UseNpgsql(Configuration.ConnectionString);
            _caOptionsBuilder.UseNpgsql(Configuration.ConnectionString);
            ZsBotContext.Initialize(_zsBotOptionsBuilder.Options, logger);
            ChatAdminContext.Initialize(_caOptionsBuilder.Options, logger);

            Thread.Sleep(1000);
        }


        public Task StartAsync(CancellationToken cancellationToken)
        {
            //_logger.LogInformation($"Starting {nameof(ChatAdminService)}");
            OnStart(null);
            return Task.CompletedTask;
        }

        public Task StopAsync(CancellationToken cancellationToken)
        {
            //_logger.LogInformation($"Stopping {nameof(ChatAdminService)}");
            OnStop();
            return Task.CompletedTask;
        }

        public void OnStart(string[] args)
        {
            string botToken = null;
            string botSessionPassword = null;
            string botProxySocket = null;
            string botProxyUserName = null;
            string botProxyPassword = null;

            // Получение конфигурации из БД
            using (var ctx = new ZsBotContext())
            using (var casCtx = new ChatAdminContext())
            {
                _defaultChatId = long.Parse(casCtx.Parameters.FirstOrDefault(p => p.Name == "DefaultChatId").Value);
                botToken = casCtx.Parameters.FirstOrDefault(p => p.Name == "BotToken").Value;
                botSessionPassword = casCtx.Parameters.FirstOrDefault(p => p.Name == "BotSessionPassword").Value;
                botProxyUserName = casCtx.Parameters.FirstOrDefault(p => p.Name == "ProxyUserName").Value;
                botProxyPassword = casCtx.Parameters.FirstOrDefault(p => p.Name == "ProxyPassword").Value;
                botProxySocket = casCtx.Parameters.FirstOrDefault(p => p.Name == "Proxy").Value;
            }

            _connector.InitializeProxy(botProxySocket, botProxyUserName, botProxyPassword);

            _bot = ZsBot.CreateNew(botToken, botSessionPassword, _connector.WebProxy);
            _bot.Start(1000);

            //string logData = $"DefaultChatId = {_defaultChatId}"
            //               + $"\nToken       = {botToken}"
            //               + $"\nPassword    = {botSessionPassword}"
            //               + $"\nProxy       = {botProxySocket}"
            //               + $"\nBaseDir     = {AppDomain.CurrentDomain.BaseDirectory}";

            //_logger.SaveToDb(LogType.Info, "Запуск службы", "Создан бот", logData);

            _agent.JobStep = Bot_JobStepAsync;
            _agent.JobCycleInterval = 60000;
            _agent.Start(1000);


            //_logger.SaveToDb(LogType.Info, "Запуск службы", "Конец запуска службы", logData);

            // Оповещение владельцев и администраторов о включении бота
            _bot.Messenger.AddMessageToOutbox($"Бот запущен", UserRole.Owner, UserRole.Administrator);

        }

        public void OnStop()
        {
            _bot.Stop();
        }
        #endregion

        
        /// <summary> Алгоритм автоматической работы (цикл) </summary>
        private void Bot_JobStepAsync()
        {
            try
            {
                //DateTime now = DateTime.Now;
                //
                //// При запуске бота пропускаем работу джоба
                //if ((now - _botStartDate) < TimeSpan.FromMinutes(1))
                //{
                //    _logger.SaveToDb(LogType.Info, "Джоб", "При старте бота не выполняем шаги джоба", default(string), null);
                //    return;
                //}
                //
                //// Задачи на начало дня
                //if (now.Date > _newDay.Date)
                //{
                //    _newDay = now.Date;
                //
                //    // 1. Сбрасываем все активные баны
                //    using (var casCtx = new ChatAdminEntities())
                //    {
                //        foreach (var b in casCtx.Bans.Where(b => b.IsActive))
                //        {
                //            b.IsActive = false;
                //            if (b.BanFinishDate?.Date == DateTime.Today)
                //                b.BanFinishDate = now.Date - TimeSpan.FromSeconds(1); // Вероятно, лишнее
                //        }
                //        casCtx.SaveChanges();
                //    }
                //
                //    // 2. Сбрасываем дату учёта сообщений
                //    _accountingStartDate = DateTime.MinValue;
                //
                //    // 3. Задаём значения для ограничений из БД (важно, когда заданные админом значения были сдвинуты, чтобы не перетереть данные)
                //    LoadLimitsFromDb();
                //
                //    // 4. Сбрасываем флаг отправки статистики за день
                //    _chatStatisticsWasSent = false;
                //
                //    _logger.SaveToDb(LogType.Info, "Джоб", "Выполнены задачи на начало дня", default(string));
                //}
                //
                //// Проверка наличия интернета и переопределение лимитов, если интернет был восстановлен после обрыва
                //var connectionStatus = _connector.AnalyzeConnection("https://vk.com/", "https://yandex.ru/", "https://www.google.ru/");
                //if (connectionStatus == ConnectionStatus.Ok)
                //{
                //    if (!_limitsAreDefined && (now - _connector.InternetRepairDate.Value).Minutes >= 1) // и с момента его появления прошла минута
                //    {
                //        // Определение лимитов
                //        LoadLimitsFromDb();
                //        _limitsAreDefined = true; // Не стоит помещать в LoadLimitsFromDb, т.к. когда лимиты сняты админом, этот флаг должен быть всё ещё поднят
                //        SendMessageToAdmins("Лимиты переопределены после восстановления соединения с сервером Telegram");
                //    }
                //    else if (!_limitsAreDefined)
                //        _logger.SaveToDb(LogType.Info, "Джоб", "Соединение восстановленно! Ожидается минута до переопределения лимитов", default(string));
                //}
                //else if (_limitsAreDefined)       // Убираем все лимиты до восстановления подключения и их нового определения
                //{
                //    _limitsAreDefined = false;
                //    _messageLimitHi = -1;
                //}
                //
                //// Запись в ЛОГ, если имеютя проблемы с доступом к серверу Telegram
                //if (connectionStatus == ConnectionStatus.NoInternetConnection)
                //    _logger.SaveToDb(LogType.Warning, "Джоб", "Нет доступа к интернету. Лимиты отключены.", default);
                //else if (connectionStatus == ConnectionStatus.NoProxyConnection)
                //    _logger.SaveToDb(LogType.Warning, "Джоб", "Нет доступа к прокси-серверу. Лимиты отключены.", default);
                //
                //
                //// После 23:55 высылаем статистику
                //if (!_chatStatisticsWasSent && now.Hour == 23 && now.Minute > 55)
                //{
                //    using (var ctx = new ZsBotEntities())
                //    {
                //        string message = "";
                //        string topTenTitle = "\n---\nСамые активные:";
                //
                //        // Формирование сообщения
                //        foreach (var chat in ctx.Chats)
                //        {
                //            var dmuc = GetDailyMessageAndUserCount_OneChat(chat, ctx);
                //            message += (message.Length > 0 && dmuc.Length > 0 ? "\n\n================\n\n" : "");
                //            message += dmuc;
                //            message += GetDailyTopTen_OneChat(chat, ctx, topTenTitle);
                //        }
                //
                //        // Рассылка админам
                //        foreach (var admin in _bot.GetUsersByRole(UserRole.Owner, UserRole.Administrator))
                //        {
                //            var chat = ctx.Chats.FirstOrDefault(c => c.ChatId == admin.UserId)
                //                     ?.GetTelegramType()
                //                     ?.Result;
                //
                //            if (chat != null) // Чат не будет найден, если админ ни разу не писал боту
                //                _bot.Messenger.AddMessageToOutbox(chat, message);
                //        }
                //    }
                //    _chatStatisticsWasSent = true;
                //    _logger.SaveToDb(LogType.Info, "Джоб", $"Отправлена статистика чата за день", default(string));
                //}
                //
                //
                //// Оповещение о сбоях
                //if (now.Minute == 59)
                //{
                //    DateTime dateBeg = DateTime.MaxValue;
                //
                //    // Если с 11:00 до 23:00, то собираем ошибки за час
                //    if (now.Hour > 9) // == 10:59
                //        dateBeg = now - TimeSpan.FromHours(1);
                //
                //    // Если 10:00, то собираем ошибки за прошлые 11 часов
                //    if (now.Hour == 9) // == 09:59
                //        dateBeg = now - TimeSpan.FromHours(11);
                //
                //    var logErrors = _logger.GetLog(LogType.Error, dateBeg, now);
                //    var logWarnings = _logger.GetLog(LogType.Warning, dateBeg, now);
                //
                //    // Формирование сообщения
                //    if (logErrors?.Count > 0 || logWarnings?.Count > 0)
                //    {
                //        string message = $"*Всего сбоев: {logErrors.Count}*";
                //        logErrors.ForEach(e => message += $"\n\n{e}");
                //
                //        message += $"\n\n\n*Всего предупреждений: {logWarnings.Count}*";
                //        logWarnings.ForEach(w => message += $"\n\n{w}");
                //
                //        // Обрезаем сообщение, если оно очень большое
                //        if (message.Length > 1200)
                //            message = message.Substring(0, 1197) + "...";
                //
                //        SendMessageToAdmins(message.Trim());
                //    }
                //}
                //
                //
                //// Оповещение о событиях
                //using (var casCtx = new ChatAdminEntities())
                //{
                //    var notifications = casCtx.Notifications
                //         .Where(n => n.NotificationIsActive
                //                  && (n.NotificationMonth == null || n.NotificationMonth == DateTime.Now.Month)
                //                  && n.NotificationDay == DateTime.Today.Day
                //                  && n.NotificationHour == DateTime.Now.Hour
                //                  && (n.NotificationMinute == DateTime.Now.Minute // та же минута или в промежутке от этой минуты до +2 минут
                //                      || (n.NotificationMinute > DateTime.Now.Minute && n.NotificationMinute < (DateTime.Now + TimeSpan.FromMinutes(2)).Minute))
                //                  && (n.NotificationLastExecDate == null
                //                      || n.NotificationLastExecDate.Value.Date != DateTime.Today)).ToList();
                //
                //    foreach (var n in notifications)
                //    {
                //        var chat = Zs.Bot.DbModel.DbChat.GetChatById(_defaultChatId);
                //        _bot.Messenger.AddMessageToOutbox(chat, n.NotificationMessage);
                //
                //        n.NotificationLastExecDate = DateTime.Now;
                //    }
                //
                //    if (notifications.Count() > 0)
                //        casCtx.SaveChanges();
                //}
            }
            catch (Exception ex)
            {
                //_remoteManager.SaveException(ex);
                _logger.SaveToDb("ОШИБКА! Выполнение джоба", ex);
            }
            finally
            {
                //_logger.SaveToDb(LogType.Info, "Джоб", "Выполнение джоба закончилось", default(string), null);
            }
        }


        public void Dispose()
        {
            Console.WriteLine("Disposing...");
        }

    }
}
