using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Zs.Bot.Modules.Messaging;
using Zs.Bot.Telegram;
using Zs.Common.Modules.Connectors;
using Zs.Service.ChatAdmin.Factories;

namespace Zs.Service.ChatAdmin
{
    class Program
    {
        private static int _reloadCounter = 0;


        public static async Task Main(string[] args)
        {
            try
            {
                // Args: dbUser; dbPassword; botToken; proxySocket; proxyLogin; proxyPassword
                // robot; sqr105203656; 538442633:AAGvZgtmWSxB7oHgRCL1zqZFP8Wb5OEq1Y0; 185.166.216.44:65233; veranda56; T5p5EfB
                if (!ArgumentsAreCorrect(args))
                    throw new ArgumentException();

                var configuration = new Configuration(
                "Zs.Service.ChatAdmin.json",
                dbUser:        args[0],
                dbPassword:    args[1],
                botToken:      args[2],
                proxySocket:   args.Length > 3 ? args[3] : null,
                proxyLogin:    args.Length > 4 ? args[4] : null,
                proxyPassword: args.Length > 5 ? args[5] : null
                );

                var connectionAnalyser = new ConnectionAnalyser("https://vk.com/", "https://yandex.ru/", "https://www.google.ru/");
                if (args.Length > 3)
                    connectionAnalyser.InitializeProxy(
                        configuration.ProxySocket,
                        configuration.ProxyLogin,
                        configuration.ProxyPassword
                        );

                var messenger = MessengerFactory.ProvideMessenger("Telegram", configuration.BotToken, connectionAnalyser.WebProxy);

                    
                // Creating ChatAdmin with configuration and messenger as parameters
                var service = new ChatAdmin(configuration, messenger, connectionAnalyser);

                await ServiceLoader();
            }
            catch (Exception ex)
            {
                _reloadCounter++;
                Console.WriteLine($"\n\n{ex}\nMessage:\n{ex.Message}"
                                + $"\n\nStackTrace:\n{ex.StackTrace}");
            }
        }

        private static bool ArgumentsAreCorrect(string[] args)
        {
            if (args?.Length < 1 || args?.Length > 6)
                throw new ArgumentException("Wrong number of arguments");

            for (int i = 0; i < args.Length; i++)
                args[i] = args[i].Trim(' ', ',', ';');
            return true;
        }

        public static async Task ServiceLoader()
        {
            try
            {
                var builder = new HostBuilder()
                    .ConfigureServices((hostContext, services) =>
                {
                    services.AddSingleton<IMessenger, TelegramMessenger>();
                    services.AddSingleton<IHostedService, ChatAdmin>();
                });

                await builder.RunConsoleAsync();
            }
            catch (Exception ex)
            {
                _reloadCounter++;
                Console.WriteLine($"\n\n{ex}\nMessage:\n{ex.Message}"
                                + $"\n\nStackTrace:\n{ex.StackTrace}");

                if (_reloadCounter < 3)
                {
                    Thread.Sleep(1000);
                    await ServiceLoader();
                }

                Console.ReadLine();
            }
        }

    }

}
