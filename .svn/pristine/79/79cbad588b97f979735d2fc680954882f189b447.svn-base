using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Zs.Bot.Helpers;
using Zs.Common.Modules.Connectors;
using Zs.Service.ChatAdmin.Factories;

namespace Zs.Service.ChatAdmin
{
    class Program
    {
        private static int _reloadCounter = 0;


        public static async Task Main(string[] args)
        {
            try
            {
                // Args: dbUser; dbPassword; botToken; proxySocket; proxyLogin; proxyPassword
                if (args?.Length < 1 || args?.Length > 6)
                    throw new ArgumentException("Wrong number of arguments");

                for (int i = 0; i < args.Length; i++)
                    args[i] = args[i].Trim(' ', ',', ';');

                await ServiceLoader(args);
            }
            catch (Exception ex)
            {
                _reloadCounter++;
                Console.WriteLine($"\n\n{ex}\nMessage:"
                                + $"\n{ex.Message}"
                                + $"\n\nStackTrace:\n{ex.StackTrace}");
                Console.ReadKey();
            }
        }


        public static async Task ServiceLoader(string[] args)
        {
            try
            {
                var configuration = new Configuration(
                        "Zs.Service.ChatAdmin.json",
                        dbUser:        args[0],
                        dbPassword:    args[1],
                        botToken:      args[2],
                        proxySocket:   args.Length > 3 ? args[3] : null,
                        proxyLogin:    args.Length > 4 ? args[4] : null,
                        proxyPassword: args.Length > 5 ? args[5] : null
                        );

                var connectionAnalyser = new ConnectionAnalyser(Logger.GetInstance(), "https://vk.com/", "https://yandex.ru/", "https://www.google.ru/");
                if (args.Length > 3)
                    connectionAnalyser.InitializeProxy(
                        configuration.ProxySocket,
                        configuration.ProxyLogin,
                        configuration.ProxyPassword
                        );

                var messenger = MessengerFactory.ProvideMessenger("Telegram", configuration.BotToken, connectionAnalyser.WebProxy);

                var builder = new HostBuilder()
                    .ConfigureServices((hostContext, services) =>
                    {
                        services.AddSingleton<IHostedService, ChatAdmin>(x =>
                            ActivatorUtilities.CreateInstance<ChatAdmin>(x, configuration, messenger, connectionAnalyser));
                });

                await builder.RunConsoleAsync();
            }
            catch (Exception ex)
            {
                _reloadCounter++;
                Console.WriteLine($"\n\n{ex}\nMessage:\n{ex.Message}"
                                + $"\n\nStackTrace:\n{ex.StackTrace}");

                if (_reloadCounter < 3)
                {
                    Thread.Sleep(1000);
                    await ServiceLoader(args);
                }

                Console.ReadLine();
            }
        }

    }

}
