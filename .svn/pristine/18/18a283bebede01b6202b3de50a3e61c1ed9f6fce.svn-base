using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text.Json;
using Zs.Bot.Model.Db;
using Zs.Common.Enums;
using Zs.Common.Interfaces;

namespace Zs.Bot.Helpers
{
    public class Logger : IZsLogger
    {
        private static Logger _instance;
        private string _emergencyLogDirrectory = AppDomain.CurrentDomain.BaseDirectory;

        public string EmergencyLogDirrectory
        {
            get => _emergencyLogDirrectory;
            set
            {
                if (string.IsNullOrWhiteSpace(value))
                    throw new ArgumentException($"{nameof(EmergencyLogDirrectory)} не может быть пустым!");

                if (!Directory.Exists(value))
                {
                    var p = Directory.CreateDirectory(value);
                    if (!p.Exists)
                        throw new Exception($"Не удалось создать каталог для хранения логов ({value})");
                }
                _emergencyLogDirrectory = value;
            }
        }


        protected Logger()
        {
        }

        public static Logger GetInstance()
        {
            if (_instance == null)
                _instance = new Logger();

            return _instance;
        }

        public void LogError(Exception ex, string message = null, string logGroup = null)
        {
            var jsonData = JsonSerialize(ex);
            LogGeneral(LogType.Error, message, logGroup, jsonData);
        }

        public void LogInfo(string message, string logGroup = null)
        {
            LogGeneral(LogType.Info, message, logGroup);
        }
        public void LogInfo<T>(string message, T logData, string logGroup = null)
        {
            var jsonData = JsonSerialize(logData);
            LogGeneral(LogType.Info, message, logGroup, jsonData);
        }

        public void LogWarning(string message = null, string logGroup = null)
        {
            LogGeneral(LogType.Warning, message, logGroup);
        }


        private void LogGeneral(LogType logType, string message, string logGroup = null, string logData = null)
        {
            // Подготовка к сохранению в БД и выполнение сохранения
            throw new NotImplementedException();
        }

        private string JsonSerialize<T>(T item)
        {
            var options = new JsonSerializerOptions()
            {
                IgnoreNullValues = true,
                WriteIndented = true
            };

            return JsonSerializer.Serialize(item, options);
        }


        /// <summary> Запись информации о сбое (асинхронный вариант) </summary>
        //public async Task SaveExceptionAsync(Exception ex, [CallerMemberName] string method = null)
        //{
        //    await Task.Factory.StartNew(()
        //        =>
        //    { SaveException(ex, method); }).ConfigureAwait(false);
        //}
        //public Task SaveException(Exception ex, [CallerMemberName] string method = null)
        //{
        //    return Task.Run(() => { SaveException(ex, method); });
        //}
        [Obsolete]
        public void SaveToDb(LogType type, string group, string msg, string data = null, int? messageId = null, [CallerMemberName] string method = null)
        {
            DbLog.SaveToDb(type, group, msg, data, messageId, method);
        }
        [Obsolete]
        public bool SaveToDb(string msg, Exception exception, int? messageId = null, [CallerMemberName] string method = null)
        {
            throw new NotImplementedException("Раскомментировать текст ниже после восстановления модели данных");

            //return DbLog.SaveToDb(msg, exception, messageId, method);
        }

        /// <summary> Получение записей журнала в одном сообщении </summary>
        public static List<string> GetLog(LogType logType, DateTime beginDate, DateTime finishDate, int rows)
        {
            List<DbLog> log = null;
            using (var ctx = new RobotDbContext())
            {
                log = ctx.Logs.Where(l => l.InsertDate >= beginDate
                                      && l.InsertDate <= finishDate
                                      && l.LogType    == logType.ToString())
                             .Cast<DbLog>()
                             .ToList();
            }
            
            // Оформление каждой записи журнала в заданном формате
            List<string> list = new List<string>();
            for (int i = 0; i < log.Count; i++)
                list.Add($"{i + 1}. Время: {log[i].InsertDate.ToShortTimeString()}"
                      + $"\nТип: {log[i].LogGroup}"
                      + $"\nОписание: {log[i].LogMessage}");
            
            return list;
        }

       
    }
}
