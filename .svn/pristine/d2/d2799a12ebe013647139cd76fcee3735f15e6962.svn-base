using System;
using System.Threading.Tasks;
using Zs.Common.Interfaces;

namespace Zs.Bot.Modules.Agent
{
    /// <summary>
    /// Агент для выполнения заданий в заданное время
    /// </summary>
    public class Agent
    {
        private readonly IZsLogger _logger;
        private readonly object _lockObject = new object();
        private bool _jobIsActive;
        public int JobCycleInterval { get; set; } = 60000;

        public bool JobIsActive
        {
            get
            {
                bool wa;
                lock (_lockObject)
                    wa = _jobIsActive;
                return wa;
            }
            set
            {
                lock (_lockObject)
                    _jobIsActive = value;
            }
        }

        /// <summary> Алгоритм, циклически выполняющийся в режиме автоматической работы </summary>
        public Action JobStep;


        public Agent()
        {
        }

        public void Start()
        {
            JobIsActive = true;
        }

        public void Stop()
        {
            JobIsActive = false;
        }

        private void PerformAutomaticWork()
        {
            try
            {
                while (true)
                {
                    Task.Run(() => JobStep?.Invoke());
                    JobWaiter(JobCycleInterval);
                }
            }
            catch (Exception e)
            {
                _logger.LogError(e);
            }
        }

        /// <summary> Запуск автоматической работы </summary>
        public void StartJob()
        {
            JobIsActive = true;

            _logger.LogInfo("Запущен джоб", "Запуск службы");
        }

        /// <summary> Ожидание с возможностью немедленной отмены автоматической работы </summary>
        public async Task JobWaiter(int milliseconds)
        {
            //try
            //{
            //    if (milliseconds < 500)
            //    {
            //        task.Wait(milliseconds);
            //        return;
            //    }
            //
            //    int part1 = milliseconds / 500; // количество итераций
            //    int part2 = milliseconds % 500; // остаток
            //
            //    while (part1-- >= 0 && JobIsActive)
            //        task.Wait(500);
            //
            //    if (JobIsActive)
            //        task.Wait(part2);
            //}
            //catch (Exception e)
            //{
            //    _logger.LogError(e);
            //}
        }


    }
}
