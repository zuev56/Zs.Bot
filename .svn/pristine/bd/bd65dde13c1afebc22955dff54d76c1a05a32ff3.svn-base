using System;
using System.Collections;
using System.Collections.Generic;

namespace Zs.Common.T4Generator
{
    internal enum ConstraintType
    {
        Unknown = -1,
        PrimaryKey,
        ForeignKey
    }

    internal abstract class DbElement
    {
        public string Name { get; }

        public DbElement(string name)
        {
            Name = name;
        }

        public override string ToString()
        {
            return $"{GetType().Name}: {Name}";
        }
    }

    internal abstract class DbElement<T> : DbElement, IEnumerable<T>
    {
        protected readonly List<T> _childs = new List<T>();
        
        public virtual T this[int index]
        {
            get => _childs[index];
            set => _childs[index] = value;
        }

        public DbElement(string name)
            : base(name)
        {
        }


        public IEnumerator<T> GetEnumerator() => _childs.GetEnumerator();

        IEnumerator IEnumerable.GetEnumerator() => _childs.GetEnumerator();

        public void Add(T child)
        {
            _childs.Add(child);
        }

        public override string ToString()
        {
            return $"{base.ToString()}[{_childs.Count}]";
        }
    }

    internal sealed class DbSchema : DbElement<DbTable>
    {
        public DbSchema(string name) 
            : base(name) 
        {
        }
    }
    

    internal sealed class DbTable : DbElement<DbColumn>
    {
        public DbTable(string name)
            : base(name)
        { 
        }
    }
    internal sealed class DbColumn : DbElement
    {
        public Type DataType { get; }
        public bool IsNullable { get; }
        public int Position { get; }
        public string ConstraintName { get; }
        public ConstraintType ConstraintType { get; }


        public DbColumn(string name, string sqlDataType, bool isNullable = true, int position = -1, string constraintName = null, string constraintType = null)
            : base(name)
        {
            DataType       = FromSqlDataType(sqlDataType);
            IsNullable     = isNullable;
            Position       = position;
            ConstraintName = constraintName;
            ConstraintType = FromSqlConstraintType(constraintType);
        }

        private Type FromSqlDataType(string sqlDataType)
        {            
            switch (sqlDataType)
            {
                case "json":                     return typeof(string);
                case "boolean":                  return typeof(bool);
                case "timestamp with time zone": return typeof(DateTime);
                case "bigint":                   return typeof(long);
                case "character varying":        return typeof(string);
                case "integer":                  return typeof(int);
                default: throw new InvalidCastException($"Не удалось преобразовать SQL тип {sqlDataType}");
            }
        }
        private ConstraintType FromSqlConstraintType(string sqlConstraintType)
        {
            switch (sqlConstraintType)
            {
                case "PRIMARY KEY": return ConstraintType.PrimaryKey;
                case "FOREIGN KEY": return ConstraintType.ForeignKey;
                default: return ConstraintType.Unknown;
            }
        }

    }

}
