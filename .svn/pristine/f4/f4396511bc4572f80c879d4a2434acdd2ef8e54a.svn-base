using Microsoft.EntityFrameworkCore;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using RemoteManager;
using RemoteManager.DbModel;
using RemoteManager.Enums;
using System;
using System.Threading.Tasks;

namespace UnitTest.NETCore
{
    [TestClass]
    public class RemoteManagerTests : TestBase
    {
        public RemoteManagerTests()
        {

        }

        [TestMethod]
        public async Task DbModel_SelectTest()
        {
            try
            {
                using (var ctx = new RemoteManagerEntities())
                {
                    Assert.IsNotNull(await ctx.Chats.FirstOrDefaultAsync());
                   // Assert.IsNotNull(await ctx.Log.FirstOrDefaultAsync());
                    Assert.IsNotNull(await ctx.MessageTypes.FirstOrDefaultAsync());
                    Assert.IsNotNull(await ctx.ReceivedMessages.FirstOrDefaultAsync());

                    Assert.IsNotNull(await ctx.Roles.FirstOrDefaultAsync());
                    Assert.IsNotNull(await ctx.SentMessages.FirstOrDefaultAsync());
                    Assert.IsNotNull(await ctx.Sessions.FirstOrDefaultAsync());
                    Assert.IsNotNull(await ctx.Users.FirstOrDefaultAsync());
                    Assert.IsNotNull(await ctx.vAdministrators.FirstOrDefaultAsync());
                }
            } // MessageTypeName1, RoleName1
            catch (Exception ex)
            {
                throw;
            }
        }

        [TestMethod]
        public void DbModel_UpdateTest()
        {
        }

        [TestMethod]
        public void DbModel_InsertDeleteTest()
        {
        }

        [TestMethod]
        public void LogSave_Test()
        {
            Exception ex0 = new Exception("Test");
            //Log.SaveToDb("Message", ex0);
            //Log.SaveToDb(LogType.Info, "Тест", "Тестовое сообщение");

        }



        [TestMethod]
        public void TestMethod1()
        {
            OLD_InputCommandInfo.SmartArgumentSplitter("/cmd arg1 \"arg 2, arg3;\"arg4\"");

            OLD_InputCommandInfo.SmartArgumentSplitter("/cmd arg1 \"arg 2\", arg3;\"arg4\"");
            OLD_InputCommandInfo.SmartArgumentSplitter("  /cmd arg 2\", arg3;\"arg4    ");
            OLD_InputCommandInfo.SmartArgumentSplitter("/cmd arg1 \"arg 2 r w\", arg3 arg3.1;   \"arg   4\"");
        }

    }
}
