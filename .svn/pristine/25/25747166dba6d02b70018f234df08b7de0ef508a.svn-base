using System;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using Zs.Common.Enums;
using Zs.Common.Exceptions;

namespace Zs.Bot.Model.Db
{

    public partial class DbLog
    {
        public static void SaveToDb(LogType logType, string message, string logGroup = null, string logData = null)
        {
            try
            {
                using var ctx = new RobotDbContext();
                ctx.Logs.Add(new DbLog
                {
                    LogType    = logType.ToString(),
                    LogMessage = message,
                    LogGroup   = logGroup,
                    LogData    = logData,
                    InsertDate = DateTime.Now
                });
                ctx.SaveChanges();
            }
            catch
            {
                // TODO: Saving to local file
            }
        }
    }

    public partial class DbUser
    {
        public static bool SaveToDb(IUser user)
        {
            if (user == null)
                throw new ArgumentNullException(nameof(user));

            using var ctx = new RobotDbContext();
            if (!ctx.Users.Any(u => u.RawDataHash == user.RawDataHash))
                ctx.Users.Add((DbUser)user);

            return ctx.SaveChanges() == 1;
        }

        public static int GetId(IUser user)
        {
            if (user == null)
                throw new ArgumentNullException(nameof(user));

            using var ctx = new RobotDbContext();
            var dbUser = ctx.Users.FirstOrDefault(u => u.RawDataHash == user.RawDataHash);

            return dbUser?.UserId ?? throw new ItemNotFoundException(user);
        }
    }

    public partial class DbChat
    {
        public static bool SaveToDb(IChat chat)
        {
            if (chat == null)
                throw new ArgumentNullException(nameof(chat));

            using var ctx = new RobotDbContext();
            if (!ctx.Chats.Any(u => u.RawDataHash == chat.RawDataHash))
            {
                ctx.Chats.Add((DbChat)chat);
                ctx.SaveChanges();
            }

            return ctx.SaveChanges() == 1;
        }

        public static int GetId(IChat chat)
        {
            if (chat == null)
                throw new ArgumentNullException(nameof(chat));

            using var ctx = new RobotDbContext();
            var dbChat = ctx.Chats.FirstOrDefault(c => c.RawDataHash == chat.RawDataHash);

            return dbChat?.ChatId ?? throw new ItemNotFoundException(chat);
        }

        public static DbChat GetChat(int chatId)
        {
            using var ctx = new RobotDbContext();
            var dbChat = ctx.Chats.FirstOrDefault(c => c.ChatId == chatId);

            return dbChat ?? throw new ItemNotFoundException();
        }
    }

    public partial class DbReceivedMessage
    {
        public static bool SaveToDb(IReceivedMessage message)
        {
            if (message == null)
                throw new ArgumentNullException(nameof(message));

            using var ctx = new RobotDbContext();
            var oldMessage = ctx.ReceivedMessages.FirstOrDefault(m => m.ReceivedMessageId == message.ReceivedMessageId);
           
            if (oldMessage is null)
                ctx.ReceivedMessages.Add((DbReceivedMessage)message);
            else
                oldMessage.ParseFrom(message);

            return ctx.SaveChanges() == 1;
        }

        private void ParseFrom(IReceivedMessage message)
        {
            ReceivedMessageId   = message.ReceivedMessageId;
            MessengerCode       = message.MessengerCode;
            MessageTypeCode     = message.MessageTypeCode;
            UserId              = message.UserId;
            ChatId              = message.ChatId;
            ReceivedMessageText = message.ReceivedMessageText;
            RawData             = message.RawData;
            IsDeleted           = message.IsDeleted;
            InsertDate          = message.InsertDate;
            UpdateDate          = DateTime.Now;
        }
    }

    public partial class DbSentMessage
    {
        public static bool SaveToDb(ISentMessage message)
        {
            if (message == null)
                throw new ArgumentNullException(nameof(message));

            using var ctx = new RobotDbContext();
            ctx.SentMessages.Add((DbSentMessage)message);

            return ctx.SaveChanges() == 1;
        }
    }

    public partial class DbUserRole
    {
        //public static string[] GetPermissionsArray
    }

    /// <summary> Cодержит результат SQL-запроса </summary>
    public partial class DbSqlResult
    {
        [Key] // Чтоб не ругался
        public string Result { get; set; }
    }



}
