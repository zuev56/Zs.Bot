using System;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Zs.Bot.Model.Db;

namespace Zs.UnitTest.BuisnessLogic
{
    [TestClass]
    public class DbModelTest : TestBase
    {
        [TestMethod]
        public void DbModel_SelectTest()
        {
            try
            {
                using (var ctx = new RobotDbContext())
                {
                    Assert.IsNotNull(ctx.Chats.FirstOrDefault());
                    Assert.IsNotNull(ctx.Logs.FirstOrDefault());
                    Assert.IsNotNull(ctx.MessageTypes.FirstOrDefault());
                    Assert.IsNotNull(ctx.ReceivedMessages.FirstOrDefault());
                    Assert.IsNotNull(ctx.UserRoles.FirstOrDefault());
                    Assert.IsNotNull(ctx.SentMessages.FirstOrDefault());
                    Assert.IsNotNull(ctx.Sessions.FirstOrDefault());
                    Assert.IsNotNull(ctx.Users.FirstOrDefault());
                    Assert.IsNotNull(ctx.Commands.FirstOrDefault());
                    //Assert.IsNotNull(ctx.SqlResults.FirstOrDefault()); Не таблица БД
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [TestMethod]
        public void DbModel_UpdateTest()
        {
            try
            {
                using var ctx = new RobotDbContext();
                // Получаем первые элементы из таблиц
                var bot             = ctx.Bots.FirstOrDefault();
                var chatType        = ctx.ChatTypes.FirstOrDefault();
                var chat            = ctx.Chats.FirstOrDefault();
                var role            = ctx.UserRoles.FirstOrDefault();
                var user            = ctx.Users.FirstOrDefault();
                var messenger       = ctx.Messengers.FirstOrDefault();
                var messageType     = ctx.MessageTypes.FirstOrDefault();
                var receivedMessage = ctx.ReceivedMessages.FirstOrDefault();
                var sentMessage     = ctx.SentMessages.FirstOrDefault();
                var session         = ctx.Sessions.FirstOrDefault();
                var log             = ctx.Logs.FirstOrDefault();
                var command         = ctx.Commands.FirstOrDefault();
                //var accounting      = ctx.Accountings.FirstOrDefault();
                var option          = ctx.Options.FirstOrDefault();

                // Берём их ключи
                var botId           = bot.BotId;
                var chatTypeCode    = chatType.ChatTypeCode;
                var chatId          = chat.ChatId;
                var roleCode        = role.UserRoleCode;
                var userId          = user.UserId;
                var messengerCode   = messenger.MessengerCode;
                var messageTypeCode = messageType.MessageTypeCode;
                var receiverMsgId   = receivedMessage.ReceivedMessageId;
                var sentMsgId       = sentMessage.SentMessageId;
                var sessionId       = session.SessionId;
                var logId           = log.LogId;
                var commandName     = command.CommandName;
                //var accountingId    = accounting.AccountingId;
                var optionName      = option.OptionName;

                // Меняем их дату
                var newUpdateDate = DateTime.Now;
                bot.UpdateDate             = newUpdateDate;
                chatType.UpdateDate        = newUpdateDate;
                chat.UpdateDate            = newUpdateDate;
                role.UpdateDate            = newUpdateDate;
                user.UpdateDate            = newUpdateDate;
                messenger.UpdateDate       = newUpdateDate;
                messageType.UpdateDate     = newUpdateDate;
                receivedMessage.UpdateDate = newUpdateDate;
                sentMessage.UpdateDate     = newUpdateDate;
                session.UpdateDate         = newUpdateDate;
                log.LogData               += " UnitTest";
                command.UpdateDate         = newUpdateDate;
                //accounting.UpdateDate      = newUpdateDate;
                option.UpdateDate          = newUpdateDate;

                // Сохраняем
                ctx.SaveChanges();

                // Проверяем
                Assert.IsTrue(newUpdateDate == ctx.Bots.First(b => b.BotId == botId).UpdateDate);
                Assert.IsTrue(newUpdateDate == ctx.ChatTypes.First(t => t.ChatTypeCode == chatTypeCode).UpdateDate);
                Assert.IsTrue(newUpdateDate == ctx.Chats.First(c => c.ChatId == chatId).UpdateDate);
                Assert.IsTrue(newUpdateDate == ctx.UserRoles.First(r => r.UserRoleCode == roleCode).UpdateDate);
                Assert.IsTrue(newUpdateDate == ctx.Users.First(u => u.UserId == userId).UpdateDate);
                Assert.IsTrue(newUpdateDate == ctx.Messengers.First(m => m.MessengerCode == messengerCode).UpdateDate);
                Assert.IsTrue(newUpdateDate == ctx.MessageTypes.First(t => t.MessageTypeCode == messageTypeCode).UpdateDate);
                Assert.IsTrue(newUpdateDate == ctx.ReceivedMessages.First(m => m.ReceivedMessageId == receiverMsgId).UpdateDate);
                Assert.IsTrue(newUpdateDate == ctx.SentMessages.First(m => m.SentMessageId == sentMsgId).UpdateDate);
                Assert.IsTrue(newUpdateDate == ctx.Sessions.First(s => s.SessionId == sessionId).UpdateDate);
                Assert.IsTrue(ctx.Logs.First(l => l.LogId == logId).LogData.Contains("UnitTest"));
                Assert.IsTrue(newUpdateDate == ctx.Commands.First(c => c.CommandName == commandName).UpdateDate);
                //Assert.IsTrue(newUpdateDate == ctx.Accountings.First(c => c.AccountingId == accountingId).UpdateDate);
                Assert.IsTrue(newUpdateDate == ctx.Options.First(o => o.OptionName == optionName).UpdateDate);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [TestMethod]
        public void DbModel_InsertDeleteTest()
        {
            try
            {
                // Создаём объекты
                var messenger       = new DbMessenger         { MessengerCode = "U1", MessengerName = "UnitTest1" };
                var bot             = new DbBot()             { MessengerCode = "U1", BotName = "UnitTest1", BotToken = "UnitTest1" };
                var chatType        = new DbChatType()        { ChatTypeCode = "UNITTEST1", ChatTypeName = "UnitTest1"};
                var chat            = new DbChat()            { ChatId = -1, ChatType = "UNITTEST1", ChatTitle = "UnitTest1", RawData = "UnitTest1"};
                var role            = new DbUserRole()        { UserRoleCode = "UNITTEST1", UserRoleName = "UnitTest1", UserRolePermissions = "UnitTest1" };
                var user            = new DbUser()            { UserId = -1, UserName = "UnitTest1", UserRoleCode = "UNITTEST1", UserIsBot = false, RawData = "UnitTest1" };
                var messageType     = new DbMessageType()     { MessageTypeCode = "U1", MessageTypeName = "UnitTest1" };
                var receivedMessage = new DbReceivedMessage() { MessengerCode = "U1", MessageTypeCode = "U1", ChatId = -1, UserId = -1, RawData = "UnitTest1" };
                var sentMessage     = new DbSentMessage()     { MessengerCode = "U1", MessageTypeCode = "U1", ChatId = -1, UserId = -1, RawData = "UnitTest1", IsSentSuccessfully = true };
                var session         = new DbSession()         { SessionCurrentState = "UnitTest1", ChatId = -1, SessionIsLoggedIn = false };
                var log             = new DbLog()             { LogType = "WARNING", LogMessage = "UnitTest1" };
                var command         = new DbCommand()         { CommandName = "/unittest1", CommandScript = "UnitTest1", CommandGroup = "UnitTest1" };
                var option          = new DbOption()          { OptionName = "UnitTest1", OptionGroup = "UnitTest1" };

                // Сохранение в БД
                using (var ctx = new RobotDbContext())
                {
                    ctx.Messengers.Add(messenger);
                    ctx.Bots.Add(bot);
                    ctx.ChatTypes.Add(chatType);
                    ctx.Chats.Add(chat);
                    ctx.UserRoles.Add(role);
                    ctx.Users.Add(user);
                    ctx.MessageTypes.Add(messageType);
                    ctx.ReceivedMessages.Add(receivedMessage);
                    ctx.SentMessages.Add(sentMessage);
                    ctx.Sessions.Add(session);
                    ctx.Logs.Add(log);
                    ctx.Commands.Add(command);
                    ctx.Options.Add(option);

                    ctx.SaveChanges();
                }

                // Удаление из БД
                using (var ctx = new RobotDbContext())
                {
                    ctx.Messengers.Remove(messenger);
                    ctx.Bots.Remove(bot);
                    ctx.ChatTypes.Remove(chatType);
                    ctx.Chats.Remove(chat);
                    ctx.UserRoles.Remove(role);
                    ctx.Users.Remove(user);
                    ctx.MessageTypes.Remove(messageType);
                    ctx.ReceivedMessages.Remove(receivedMessage);
                    ctx.SentMessages.Remove(sentMessage);
                    ctx.Sessions.Remove(session);
                    ctx.Logs.Remove(log);
                    ctx.Commands.Remove(command);
                    ctx.Options.Remove(option);

                    ctx.SaveChanges();
                }
            }
            catch (Exception ex)
            {
                throw ex;

                // Для очистки БД в случае сбоя теста
                // delete FROM rmgr."Chat"        where "ChatTitle"          = 'UnitTest';
                // delete FROM rmgr."Role"        where "RoleName"           = 'UnitTest';
                // delete FROM rmgr."User"        where "UserName"           = 'UnitTest';
                // delete FROM rmgr."MessageType" where "MessageTypeName"    = 'UnitTest';
                // delete FROM rmgr."ReceivedMsg" where "ReceivedMsgText"    = 'UnitTest';
                // delete FROM rmgr."SentMsg"     where "SentMsgText"        = 'UnitTest';
                // delete FROM rmgr."Session"     where "SessionCurrentStep" = 'UnitTest';
                // delete FROM rmgr."Log"         where "LogMessage"         = 'UnitTest';
                // delete FROM rmgr."Command"     where "CommandName"        = '/unittest';

            }
        }

    }
}
