using System;
using System.Linq;
using Npgsql;

namespace Zs.Common.T4Generator
{
    public static class DbReader
    {
        public static string GetVersion(string connectionString)
        {
            try
            {
                using (var connection = new NpgsqlConnection(connectionString))
                {
                    connection.Open();

                    var query = "SELECT version()";

                    using (var command = new NpgsqlCommand(query, connection))
                        return command.ExecuteScalar().ToString();
                }
            }
            catch (Exception ex)
            {
                Logger.TraceException(ex);
                throw;
            }
        }

        public static DbInfo GetDbInfo(string connectionString)
        {
            try
            {
                DbInfo dataBase;

                using (var connection = new NpgsqlConnection(connectionString))
                {
                    connection.Open();

                    dataBase = new DbInfo(connection.Database);

                    var query = "select c.table_schema, c.table_name, c.column_name, c.ordinal_position, c.is_nullable, c.data_type\n"
                              + "	  , kc.constraint_name, tc.constraint_type\n"
                              + "from information_schema.columns c\n"
                              + "left outer join information_schema.key_column_usage kc on kc.table_schema = c.table_schema\n"
                              + "                                                      and kc.table_name   = c.table_name\n"
                              + "                                                      and kc.column_name  = c.column_name\n"
                              + "left outer join information_schema.table_constraints tc on tc.constraint_schema = kc.constraint_schema\n"
                              + "                                                       and tc.table_name        = kc.table_name\n"
                              + "												        and tc.constraint_name   = kc.constraint_name\n"
                              + "where c.table_schema not in ('information_schema', 'pg_catalog')\n"
                              + "order by c.table_schema, c.table_name, c.ordinal_position\n";

                    using (var command = new NpgsqlCommand(query, connection))
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            var schema         = reader.GetString(0);
                            var table          = reader.GetString(1);
                            var column         = reader.GetString(2).Replace('-', '_').Replace('.', '_').Replace(' ', '_');
                            var position       = reader.GetInt32(3);
                            var isNullable     = reader.GetString(4).ToUpper() == "YES" ? true : false;
                            var dataType       = reader.GetString(5);
                            var constraintName = !reader.IsDBNull(6) ? reader.GetString(6) : null;
                            var constraintType = !reader.IsDBNull(7) ? reader.GetString(7) : null;

                            DbSchema dbSchema;
                            if (dataBase.Any(s => s.Name == schema))
                                dbSchema = dataBase.First(s => s.Name == schema);
                            else
                            {
                                dbSchema = new DbSchema(schema);
                                dataBase.Add(dbSchema);
                            }

                            DbTable dbTable;
                            if (dbSchema.Any(t => t.Name == table))
                                dbTable = dbSchema.First(t => t.Name == table);
                            else
                            {
                                dbTable = new DbTable(table);
                                dbSchema.Add(dbTable);
                            }

                            if (dbTable.Any(c => c.Name == column))
                                throw new OverflowException($"В таблице {table} уже имеется столбец с именем {column}");

                            DbColumn dbColumn = new DbColumn(column, dataType, isNullable, position, constraintName, constraintType);
                            dbTable.Add(dbColumn);
                        }
                    }
                }

                return dataBase;
            }
            catch (Exception ex)
            {
                Logger.TraceException(ex);
                throw;
            }
        }

        
    }
}
