using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading;
using Microsoft.EntityFrameworkCore;
using Zs.Bot.DbModel;
using Zs.Bot.Helpers;
using Zs.Bot.Modules;
using Zs.Bot.Modules.Command;
using Zs.Bot.Modules.Messaging;
using Zs.Common.Enums;
using Zs.Common.Interfaces;
using Zs.Common.Modules;

namespace Zs.Bot
{
    /// <summary>
    /// Обёртка над Telegram.Bot
    /// </summary>
    public class ZsBot : ModuleBase
    {
        private IServiceConfiguration _configuration;
        private static DbContextOptionsBuilder<ZsBotContext> _zsBotOptionsBuilder = new DbContextOptionsBuilder<ZsBotContext>();

        private readonly Logger _logger = Logger.GetInstance();

        /// <summary> Модуль для упарвления командами </summary>
        public CommandManager CommandManager;

        /// <summary> Модуль для упарвления сообщениями </summary>
        public TelegramMessenger Messenger;


        protected ZsBot(
              IServiceConfiguration configuration
            , string token
            , IWebProxy webProxy)
        {
            _configuration = configuration;

            TelegramMessenger.Initialize(token, webProxy);

            Messenger = TelegramMessenger.GetInstance();
            Messenger.InputMessageProcessed += Messenger_InputMessageProcess;

            CommandManager = CommandManager.GetInstance();
            CommandManager.OnCommandCompleted += CommandManager_OnCommandCompleted;

        }

        /// <summary> Действие на выполнение команды </summary>
        private void CommandManager_OnCommandCompleted(CommandResult result)
        {
            Messenger.AddMessageToOutbox((long)result.ReturnAddress, result.Text);
        }


        private void Messenger_InputMessageProcess(object returnAddress, string messageText)
        {
            // 1. Проверка авторизации
            //if (!Authorization(tgMessage) && session.SessionCurrentStep != IsWaitingForPassword)
            //    return;

            // 2. Обрабатываем в зависимости от того, команда это или данные                           
            if (BotCommand.IsCommand(messageText))
            {
                var botCommand = BotCommand.ParseMessage(returnAddress, messageText);
                CommandManager.EnqueueCommand(botCommand);
            }
            else
            {

            }
        }

        /// <summary> Получение нового экземпляра бота (оболочки бота) </summary>
        public static ZsBot CreateNew(IServiceConfiguration configuration, string token, string password, IWebProxy webProxy)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(token))
                    throw new ArgumentException($"Аргумент {nameof(token)} не может быть пустым или состоять из пробелов!");

                return new ZsBot(configuration, token, webProxy);
            }
            catch (Exception ex)
            {
                throw;
            }
        }


        /// <summary> Запуск бота </summary>
        public override void Start(int delay)
        {
            try
            {
                Thread.Sleep(delay);

                // Инициализация контекста данных
                _zsBotOptionsBuilder.UseNpgsql(_configuration.ConnectionString);
                ZsBotContext.Initialize(_zsBotOptionsBuilder.Options, _logger);

                CommandManager.Start(500);
                Messenger.Start(500);
            }
            catch (Exception ex)
            {
                _logger.SaveToDb("ОШИБКА! Запуск бота", ex);
            }
        }

        /// <summary> Остановка бота </summary>
        public override void Stop(int delay = 0)
        {
            try
            {
                _logger.SaveToDb(LogType.Info, "Остановка службы", "Начало", default(string));
                
                CommandManager.Stop();
                Messenger.Stop();
            }
            catch (Exception ex)
            {
                _logger.SaveToDb("ОШИБКА! Остановка бота", ex);
            }
            finally
            {
                _logger.SaveToDb(LogType.Info, "Остановка службы", "Конец", default(string));
            }
        }


        /// <summary> Получение списка пользователей заданных ролей </summary>
        public List<int> GetUsersIdByRole(params UserRole[] userRoles)
        {
            var users = new List<DbUser>();

            if (userRoles != null && userRoles.Length != 0)
            {
                using (var ctx = new ZsBotContext())
                {
                    var necessaryUsers = ctx.Users
                       .Where(u => userRoles.Cast<string>().Contains(u.RoleName));

                    foreach (var user in necessaryUsers)
                        users.Add((DbUser)user);
                }
            }
            return users.Select(u => u.UserId).ToList();
        }

    }
}
