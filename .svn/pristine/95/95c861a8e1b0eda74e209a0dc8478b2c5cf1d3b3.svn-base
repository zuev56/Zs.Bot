


CREATE TABLE cas."Parameter" (
    "Name"        varchar(50)   PRIMARY KEY,
    "Value"       varchar(2000)     NULL,
    "Group"       varchar(100)      NULL,
    "Description" varchar(500)      NULL,
    "UpdateDate"  timestamptz   NOT NULL DEFAULT now(),
    "InsertDate"  timestamptz   NOT NULL DEFAULT now()
);
CREATE TRIGGER "Parameter_UpdateDate_reset" BEFORE UPDATE
ON cas."Parameter" FOR EACH ROW EXECUTE PROCEDURE helper."UpdateDate_reset"();

INSERT INTO cas."Parameter"("Name", "Value", "Description") VALUES('ChatUserMessageCountHiHi', '-1', 'Верхняя аварийная уставка');
INSERT INTO cas."Parameter"("Name", "Value", "Description") VALUES('ChatUserMessageCountHi',   '-1', 'Верхняя предупредительная уставка');
INSERT INTO cas."Parameter"("Name", "Value", "Description") VALUES('DefaultChatId',            '',   'Идентификатор чата, с которым бот работает по умолчанию');




CREATE TABLE cas."Ban" (
    "BanId"              serial      PRIMARY KEY,
    "UserId"             int         NOT NULL REFERENCES rmgr."User" ("UserId"),
    "ChatId"             bigint      NOT NULL REFERENCES rmgr."Chat" ("ChatId"),
    "IsWarned"           bool            NULL,					-- Предупрежден перед баном
    "BanFinishDate"      timestamptz     NULL,	                -- Дата окончания бана
    "IsActive"			 bool        NOT NULL,                  -- Показывает, отработала запись своё или нет
    "InsertDate"         timestamptz NOT NULL DEFAULT now(),	
    "UpdateDate"         timestamptz NOT NULL DEFAULT now()
);
CREATE TRIGGER "Ban_UpdateDate_reset" BEFORE UPDATE
ON cas."Ban" FOR EACH ROW EXECUTE PROCEDURE helper."UpdateDate_reset"();




CREATE TABLE cas."Accounting" (
    "AccountingId"        serial      PRIMARY KEY,
    "AccountingStartDate" timestamptz NOT NULL DEFAULT now(),	
    "UpdateDate"          timestamptz NOT NULL DEFAULT now()
);
CREATE TRIGGER "Accounting_UpdateDate_reset" BEFORE UPDATE
ON cas."Accounting" FOR EACH ROW EXECUTE PROCEDURE helper."UpdateDate_reset"();




CREATE TABLE cas."Notification" (
    "NotificationId"           serial        PRIMARY KEY,
    "NotificationIsActive"     bool          NOT NULL DEFAULT TRUE,
    "NotificationMessage"      varchar(5000) NOT NULL,
    "NotificationMonth"        int               NULL, -- месяц, если событие ежегодное; null, если событие ежемесячное
    "NotificationDay"          int           NOT NULL, -- день месяца
    "NotificationHour"         int           NOT NULL, -- время оповещения
    "NotificationMinute"       int           NOT NULL, -- время оповещения
    "NotificationLastExecDate" timestamptz       NULL,
    "UpdateDate"               timestamptz   NOT NULL DEFAULT now(),
    "InsertDate"               timestamptz   NOT NULL DEFAULT now()
);
CREATE TRIGGER "Notification_UpdateDate_reset" BEFORE UPDATE
ON cas."Notification" FOR EACH ROW EXECUTE PROCEDURE helper."UpdateDate_reset"();




CREATE TABLE cas."UnInterestedWords" (
    "wd"           varchar(100)         PRIMARY KEY, -- word нельзя использовать в постгресе
    "insert_date"    timestamptz   NOT NULL DEFAULT now()
);